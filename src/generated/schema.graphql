### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  isAdmin: Boolean
  token: String
  user: User
}

type Candidate {
  age: Int!
  bio_summary: String
  current_office: String!
  gender: Gender
  id: ID!
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  prevote_score: Float
  state: String!
  vote_type: VoteType
}

type CandidatePosition {
  candidateId: String!
  id: ID!
  latest: Boolean
  link: String
  positionId: String!
  rank: Int
  time: DateTime
}

input CandidatePositionUpdateInput {
  candidateId: String
  latest: Boolean
  link: String
  positionId: String
  rank: Int
  time: DateTime
}

input CandidatePositionWhereUniqueInput {
  id: ID
}

type CandidateWithVote {
  candidate: Candidate
  compromises: Float
  favorites: Float
  tops: Float
  unknowns: Float
  vetos: Float
}

enum CategoryType {
  ABORTION
  ACTIVISM
  AWARDS
  AWARDS_FOR_MILITARY_SERVICE
  BANKING
  BIOGRAPHICAL
  BIPARTISAMSHIP
  BUDGET
  CAMPAIGN
  CIVIL_RIGHTS
  CONSTITUENT_SERVICES
  CRIME
  DEFENSE
  DRUG_POLICY
  ECONOMIC_INEQUALITY
  ECONOMY
  EDUCATION
  ENVIRONMENT
  EXECUTIVE_LEADERSHIP
  FOREIGN_POLICY
  GAFFES
  GENDER
  GUN_RIGHTS_CONTROL
  HEALTH_CARE
  IMMIGRATION
  INFRASTRUCTURE
  INTELLECTUAL_ABILITY
  LEGISLATIVE
  MILITARY_SERVICE
  POLICING
  POLITICAL_STRATEGY
  SCANDAL
  TBD
  URBAN_DEVELOPMENT
}

type CountAttribute {
  average_compromise: Float
  average_favorite: Float
  average_top: Float
  average_unknown: Float
  average_veto: Float
  compromiseCount: Int
  favoriteCount: Int
  prevotes: Int
  topCount: Int
  unknownCount: Int
  users: Int
  vetoCount: Int
}

scalar DateTime

enum Gender {
  FEMALE
  MALE
}

enum LikeType {
  DISLIKE
  LIKE
  UNSPECIFIED
}

type Mutation {
  createCandidate(age: Int, bio_summary: String, current_office: String!, file: Upload, gender: Gender, latest_odds: Float, latest_poll: Float, name: String!, party: String!, state: String!): Candidate
  createCandidatePosition(candidateId: ID!, positionId: ID!): Position
  createPoll(candidateId: ID!, pollType: PollType): Poll
  createPosition(data: PositionCreateInput!): Position!
  createQualification(data: QualificationCreateInput!): Qualification!
  createTopic(data: TopicCreateInput!): Topic!
  createUserPositionLike(candidateId: ID!, like: LikeType, positionId: ID!): UserPositionLike
  createUserQualificationLike(like: LikeType, qualificationId: ID!): UserQualificationLike
  createUserVote(candidateId: ID!, voteType: VoteType): UserVote
  deleteCandidate(id: ID!): Candidate
  deleteCandidatePosition(candidateId: ID!, positionId: ID!): Position
  deletePosition(id: ID!): Position
  deleteQualification(id: ID!): Qualification
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  login(email: String, password: String): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  updateCandidate(age: Int, bio_summary: String, current_office: String!, gender: Gender, id: ID!, latest_odds: Float, latest_poll: Float, name: String!, party: String!, state: String!): Candidate
  updateCandidatePosition(data: CandidatePositionUpdateInput!, where: CandidatePositionWhereUniqueInput!): CandidatePosition
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateQualification(data: QualificationUpdateInput!, where: QualificationWhereUniqueInput!): Qualification
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
}

type Poll {
  candidateId: String!
  date: DateTime
  error_margin: String
  id: ID!
  link_to_poll: String
  poll_type: PollType!
  userId: String!
}

enum PollOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  error_margin_ASC
  error_margin_DESC
  id_ASC
  id_DESC
  link_to_poll_ASC
  link_to_poll_DESC
  poll_type_ASC
  poll_type_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

enum PollType {
  HEADTOHEAD
  PRIMARY
}

input PollWhereInput {
  AND: [PollWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  error_margin: String
  error_margin_contains: String
  error_margin_ends_with: String
  error_margin_gt: String
  error_margin_gte: String
  error_margin_in: [String!]
  error_margin_lt: String
  error_margin_lte: String
  error_margin_not: String
  error_margin_not_contains: String
  error_margin_not_ends_with: String
  error_margin_not_in: [String!]
  error_margin_not_starts_with: String
  error_margin_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  link_to_poll: String
  link_to_poll_contains: String
  link_to_poll_ends_with: String
  link_to_poll_gt: String
  link_to_poll_gte: String
  link_to_poll_in: [String!]
  link_to_poll_lt: String
  link_to_poll_lte: String
  link_to_poll_not: String
  link_to_poll_not_contains: String
  link_to_poll_not_ends_with: String
  link_to_poll_not_in: [String!]
  link_to_poll_not_starts_with: String
  link_to_poll_starts_with: String
  NOT: [PollWhereInput!]
  OR: [PollWhereInput!]
  poll_type: PollType
  poll_type_in: [PollType!]
  poll_type_not: PollType
  poll_type_not_in: [PollType!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type Position {
  detail: String
  id: ID!
  like_type: LikeType
  name: String!
  summary: String
  topicId: String
}

input PositionCreateInput {
  detail: String
  id: ID
  like_type: LikeType
  name: String!
  summary: String
  topicId: String
}

enum PositionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  detail_ASC
  detail_DESC
  id_ASC
  id_DESC
  like_type_ASC
  like_type_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  topicId_ASC
  topicId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PositionUpdateInput {
  detail: String
  like_type: LikeType
  name: String
  summary: String
  topicId: String
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  like_type: LikeType
  like_type_in: [LikeType!]
  like_type_not: LikeType
  like_type_not_in: [LikeType!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  topicId: String
  topicId_contains: String
  topicId_ends_with: String
  topicId_gt: String
  topicId_gte: String
  topicId_in: [String!]
  topicId_lt: String
  topicId_lte: String
  topicId_not: String
  topicId_not_contains: String
  topicId_not_ends_with: String
  topicId_not_in: [String!]
  topicId_not_starts_with: String
  topicId_starts_with: String
}

input PositionWhereUniqueInput {
  id: ID
}

type PositionWithLike {
  dislikes: Int
  likes: Int
  position: Position
}

type Qualification {
  candidateId: String
  detail: String
  id: ID!
  like_type: LikeType
  name: String!
  rank: Int
  summary: String
  years: Int!
}

input QualificationCreateInput {
  candidateId: String
  detail: String
  id: ID
  like_type: LikeType
  name: String!
  rank: Int
  summary: String
  years: Int!
}

input QualificationUpdateInput {
  candidateId: String
  detail: String
  like_type: LikeType
  name: String
  rank: Int
  summary: String
  years: Int
}

input QualificationWhereUniqueInput {
  id: ID
}

type QualificationWithLike {
  dislikes: Int
  likes: Int
  qualification: Qualification
}

type Query {
  candidatePositions(candidateId: ID!): [Position!]
  candidateQualifications(candidateId: ID!): [Qualification!]
  candidates: [Candidate!]
  candidatesWithVotes: [CandidateWithVote!]
  candidatesWithVotesPercent: [CandidateWithVote!]
  me: UserProfile
  polls(after: String, before: String, first: Int, last: Int, orderBy: PollOrderByInput, skip: Int, where: PollWhereInput): [Poll!]!
  position(where: PositionWhereUniqueInput!): Position
  positions(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]!
  positionsWithLikes: [PositionWithLike!]
  qualification(where: QualificationWhereUniqueInput!): Qualification
  qualificationsWithLikes: [QualificationWithLike!]
  topics(after: String, before: String, first: Int, last: Int, orderBy: TopicOrderByInput, skip: Int, where: TopicWhereInput): [Topic!]!
  userPositionLikes(after: String, before: String, first: Int, last: Int, orderBy: UserPositionLikeOrderByInput, skip: Int, where: UserPositionLikeWhereInput): [UserPositionLike!]!
  userQualificationLikes(after: String, before: String, first: Int, last: Int, orderBy: UserQualificationLikeOrderByInput, skip: Int, where: UserQualificationLikeWhereInput): [UserQualificationLike!]!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  userVotes: [UserVote!]
  voteAttributes: CountAttribute
}

type Topic {
  category: CategoryType!
  id: ID!
  name: String!
}

input TopicCreateInput {
  category: CategoryType
  id: ID
  name: String!
}

enum TopicOrderByInput {
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TopicUpdateInput {
  category: CategoryType
  name: String
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  category: CategoryType
  category_in: [CategoryType!]
  category_not: CategoryType
  category_not_in: [CategoryType!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TopicWhereInput!]
  OR: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  gender: Gender
  id: ID!
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPositionLike {
  candidateId: String!
  id: ID!
  latest: Boolean
  like: LikeType
  positionId: String!
  time: DateTime
  userId: String!
}

enum UserPositionLikeOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  like_ASC
  like_DESC
  positionId_ASC
  positionId_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

input UserPositionLikeWhereInput {
  AND: [UserPositionLikeWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  like: LikeType
  like_in: [LikeType!]
  like_not: LikeType
  like_not_in: [LikeType!]
  NOT: [UserPositionLikeWhereInput!]
  OR: [UserPositionLikeWhereInput!]
  positionId: String
  positionId_contains: String
  positionId_ends_with: String
  positionId_gt: String
  positionId_gte: String
  positionId_in: [String!]
  positionId_lt: String
  positionId_lte: String
  positionId_not: String
  positionId_not_contains: String
  positionId_not_ends_with: String
  positionId_not_in: [String!]
  positionId_not_starts_with: String
  positionId_starts_with: String
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type UserProfile {
  email: String
  gender: String
  id: String
  isAdmin: Boolean
  name: String
}

type UserQualificationLike {
  id: ID!
  latest: Boolean
  like: LikeType!
  qualificationId: String!
  time: DateTime
  userId: String!
}

enum UserQualificationLikeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  like_ASC
  like_DESC
  qualificationId_ASC
  qualificationId_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

input UserQualificationLikeWhereInput {
  AND: [UserQualificationLikeWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  like: LikeType
  like_in: [LikeType!]
  like_not: LikeType
  like_not_in: [LikeType!]
  NOT: [UserQualificationLikeWhereInput!]
  OR: [UserQualificationLikeWhereInput!]
  qualificationId: String
  qualificationId_contains: String
  qualificationId_ends_with: String
  qualificationId_gt: String
  qualificationId_gte: String
  qualificationId_in: [String!]
  qualificationId_lt: String
  qualificationId_lte: String
  qualificationId_not: String
  qualificationId_not_contains: String
  qualificationId_not_ends_with: String
  qualificationId_not_in: [String!]
  qualificationId_not_starts_with: String
  qualificationId_starts_with: String
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type UserVote {
  candidateId: String!
  id: ID!
  latest: Boolean
  time: DateTime
  userId: String!
  vote_type: VoteType!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  role: Int
  role_gt: Int
  role_gte: Int
  role_in: [Int!]
  role_lt: Int
  role_lte: Int
  role_not: Int
  role_not_in: [Int!]
}

enum VoteType {
  COMPROMISE
  FAVORITE
  TOP
  UNKNOWNS
  VETO
}
