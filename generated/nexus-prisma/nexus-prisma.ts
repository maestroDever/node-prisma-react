/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Candidate: CandidateObject
      CandidateConnection: CandidateConnectionObject
      CandidateEdge: CandidateEdgeObject
      AggregateCandidate: AggregateCandidateObject
      Qualification: QualificationObject
      QualificationConnection: QualificationConnectionObject
      QualificationEdge: QualificationEdgeObject
      AggregateQualification: AggregateQualificationObject
      Topic: TopicObject
      TopicConnection: TopicConnectionObject
      TopicEdge: TopicEdgeObject
      AggregateTopic: AggregateTopicObject
      Position: PositionObject
      PositionConnection: PositionConnectionObject
      PositionEdge: PositionEdgeObject
      AggregatePosition: AggregatePositionObject
      CandidatePosition: CandidatePositionObject
      CandidatePositionConnection: CandidatePositionConnectionObject
      CandidatePositionEdge: CandidatePositionEdgeObject
      AggregateCandidatePosition: AggregateCandidatePositionObject
      UserVote: UserVoteObject
      UserVoteConnection: UserVoteConnectionObject
      UserVoteEdge: UserVoteEdgeObject
      AggregateUserVote: AggregateUserVoteObject
      UserQualificationLike: UserQualificationLikeObject
      UserQualificationLikeConnection: UserQualificationLikeConnectionObject
      UserQualificationLikeEdge: UserQualificationLikeEdgeObject
      AggregateUserQualificationLike: AggregateUserQualificationLikeObject
      UserPositionLike: UserPositionLikeObject
      UserPositionLikeConnection: UserPositionLikeConnectionObject
      UserPositionLikeEdge: UserPositionLikeEdgeObject
      AggregateUserPositionLike: AggregateUserPositionLikeObject
      Poll: PollObject
      PollConnection: PollConnectionObject
      PollEdge: PollEdgeObject
      AggregatePoll: AggregatePollObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      CandidateSubscriptionPayload: CandidateSubscriptionPayloadObject
      CandidatePreviousValues: CandidatePreviousValuesObject
      QualificationSubscriptionPayload: QualificationSubscriptionPayloadObject
      QualificationPreviousValues: QualificationPreviousValuesObject
      TopicSubscriptionPayload: TopicSubscriptionPayloadObject
      TopicPreviousValues: TopicPreviousValuesObject
      PositionSubscriptionPayload: PositionSubscriptionPayloadObject
      PositionPreviousValues: PositionPreviousValuesObject
      CandidatePositionSubscriptionPayload: CandidatePositionSubscriptionPayloadObject
      CandidatePositionPreviousValues: CandidatePositionPreviousValuesObject
      UserVoteSubscriptionPayload: UserVoteSubscriptionPayloadObject
      UserVotePreviousValues: UserVotePreviousValuesObject
      UserQualificationLikeSubscriptionPayload: UserQualificationLikeSubscriptionPayloadObject
      UserQualificationLikePreviousValues: UserQualificationLikePreviousValuesObject
      UserPositionLikeSubscriptionPayload: UserPositionLikeSubscriptionPayloadObject
      UserPositionLikePreviousValues: UserPositionLikePreviousValuesObject
      PollSubscriptionPayload: PollSubscriptionPayloadObject
      PollPreviousValues: PollPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Candidate: CandidateFieldDetails
      CandidateConnection: CandidateConnectionFieldDetails
      CandidateEdge: CandidateEdgeFieldDetails
      AggregateCandidate: AggregateCandidateFieldDetails
      Qualification: QualificationFieldDetails
      QualificationConnection: QualificationConnectionFieldDetails
      QualificationEdge: QualificationEdgeFieldDetails
      AggregateQualification: AggregateQualificationFieldDetails
      Topic: TopicFieldDetails
      TopicConnection: TopicConnectionFieldDetails
      TopicEdge: TopicEdgeFieldDetails
      AggregateTopic: AggregateTopicFieldDetails
      Position: PositionFieldDetails
      PositionConnection: PositionConnectionFieldDetails
      PositionEdge: PositionEdgeFieldDetails
      AggregatePosition: AggregatePositionFieldDetails
      CandidatePosition: CandidatePositionFieldDetails
      CandidatePositionConnection: CandidatePositionConnectionFieldDetails
      CandidatePositionEdge: CandidatePositionEdgeFieldDetails
      AggregateCandidatePosition: AggregateCandidatePositionFieldDetails
      UserVote: UserVoteFieldDetails
      UserVoteConnection: UserVoteConnectionFieldDetails
      UserVoteEdge: UserVoteEdgeFieldDetails
      AggregateUserVote: AggregateUserVoteFieldDetails
      UserQualificationLike: UserQualificationLikeFieldDetails
      UserQualificationLikeConnection: UserQualificationLikeConnectionFieldDetails
      UserQualificationLikeEdge: UserQualificationLikeEdgeFieldDetails
      AggregateUserQualificationLike: AggregateUserQualificationLikeFieldDetails
      UserPositionLike: UserPositionLikeFieldDetails
      UserPositionLikeConnection: UserPositionLikeConnectionFieldDetails
      UserPositionLikeEdge: UserPositionLikeEdgeFieldDetails
      AggregateUserPositionLike: AggregateUserPositionLikeFieldDetails
      Poll: PollFieldDetails
      PollConnection: PollConnectionFieldDetails
      PollEdge: PollEdgeFieldDetails
      AggregatePoll: AggregatePollFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      CandidateSubscriptionPayload: CandidateSubscriptionPayloadFieldDetails
      CandidatePreviousValues: CandidatePreviousValuesFieldDetails
      QualificationSubscriptionPayload: QualificationSubscriptionPayloadFieldDetails
      QualificationPreviousValues: QualificationPreviousValuesFieldDetails
      TopicSubscriptionPayload: TopicSubscriptionPayloadFieldDetails
      TopicPreviousValues: TopicPreviousValuesFieldDetails
      PositionSubscriptionPayload: PositionSubscriptionPayloadFieldDetails
      PositionPreviousValues: PositionPreviousValuesFieldDetails
      CandidatePositionSubscriptionPayload: CandidatePositionSubscriptionPayloadFieldDetails
      CandidatePositionPreviousValues: CandidatePositionPreviousValuesFieldDetails
      UserVoteSubscriptionPayload: UserVoteSubscriptionPayloadFieldDetails
      UserVotePreviousValues: UserVotePreviousValuesFieldDetails
      UserQualificationLikeSubscriptionPayload: UserQualificationLikeSubscriptionPayloadFieldDetails
      UserQualificationLikePreviousValues: UserQualificationLikePreviousValuesFieldDetails
      UserPositionLikeSubscriptionPayload: UserPositionLikeSubscriptionPayloadFieldDetails
      UserPositionLikePreviousValues: UserPositionLikePreviousValuesFieldDetails
      PollSubscriptionPayload: PollSubscriptionPayloadFieldDetails
      PollPreviousValues: PollPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      CandidateWhereUniqueInput: CandidateWhereUniqueInputInputObject
      CandidateWhereInput: CandidateWhereInputInputObject
      QualificationWhereUniqueInput: QualificationWhereUniqueInputInputObject
      QualificationWhereInput: QualificationWhereInputInputObject
      TopicWhereUniqueInput: TopicWhereUniqueInputInputObject
      TopicWhereInput: TopicWhereInputInputObject
      PositionWhereUniqueInput: PositionWhereUniqueInputInputObject
      PositionWhereInput: PositionWhereInputInputObject
      CandidatePositionWhereUniqueInput: CandidatePositionWhereUniqueInputInputObject
      CandidatePositionWhereInput: CandidatePositionWhereInputInputObject
      UserVoteWhereUniqueInput: UserVoteWhereUniqueInputInputObject
      UserVoteWhereInput: UserVoteWhereInputInputObject
      UserQualificationLikeWhereUniqueInput: UserQualificationLikeWhereUniqueInputInputObject
      UserQualificationLikeWhereInput: UserQualificationLikeWhereInputInputObject
      UserPositionLikeWhereUniqueInput: UserPositionLikeWhereUniqueInputInputObject
      UserPositionLikeWhereInput: UserPositionLikeWhereInputInputObject
      PollWhereUniqueInput: PollWhereUniqueInputInputObject
      PollWhereInput: PollWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      CandidateCreateInput: CandidateCreateInputInputObject
      CandidateUpdateInput: CandidateUpdateInputInputObject
      CandidateUpdateManyMutationInput: CandidateUpdateManyMutationInputInputObject
      QualificationCreateInput: QualificationCreateInputInputObject
      QualificationUpdateInput: QualificationUpdateInputInputObject
      QualificationUpdateManyMutationInput: QualificationUpdateManyMutationInputInputObject
      TopicCreateInput: TopicCreateInputInputObject
      TopicUpdateInput: TopicUpdateInputInputObject
      TopicUpdateManyMutationInput: TopicUpdateManyMutationInputInputObject
      PositionCreateInput: PositionCreateInputInputObject
      PositionUpdateInput: PositionUpdateInputInputObject
      PositionUpdateManyMutationInput: PositionUpdateManyMutationInputInputObject
      CandidatePositionCreateInput: CandidatePositionCreateInputInputObject
      CandidatePositionUpdateInput: CandidatePositionUpdateInputInputObject
      CandidatePositionUpdateManyMutationInput: CandidatePositionUpdateManyMutationInputInputObject
      UserVoteCreateInput: UserVoteCreateInputInputObject
      UserVoteUpdateInput: UserVoteUpdateInputInputObject
      UserVoteUpdateManyMutationInput: UserVoteUpdateManyMutationInputInputObject
      UserQualificationLikeCreateInput: UserQualificationLikeCreateInputInputObject
      UserQualificationLikeUpdateInput: UserQualificationLikeUpdateInputInputObject
      UserQualificationLikeUpdateManyMutationInput: UserQualificationLikeUpdateManyMutationInputInputObject
      UserPositionLikeCreateInput: UserPositionLikeCreateInputInputObject
      UserPositionLikeUpdateInput: UserPositionLikeUpdateInputInputObject
      UserPositionLikeUpdateManyMutationInput: UserPositionLikeUpdateManyMutationInputInputObject
      PollCreateInput: PollCreateInputInputObject
      PollUpdateInput: PollUpdateInputInputObject
      PollUpdateManyMutationInput: PollUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      CandidateSubscriptionWhereInput: CandidateSubscriptionWhereInputInputObject
      QualificationSubscriptionWhereInput: QualificationSubscriptionWhereInputInputObject
      TopicSubscriptionWhereInput: TopicSubscriptionWhereInputInputObject
      PositionSubscriptionWhereInput: PositionSubscriptionWhereInputInputObject
      CandidatePositionSubscriptionWhereInput: CandidatePositionSubscriptionWhereInputInputObject
      UserVoteSubscriptionWhereInput: UserVoteSubscriptionWhereInputInputObject
      UserQualificationLikeSubscriptionWhereInput: UserQualificationLikeSubscriptionWhereInputInputObject
      UserPositionLikeSubscriptionWhereInput: UserPositionLikeSubscriptionWhereInputInputObject
      PollSubscriptionWhereInput: PollSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Gender: GenderValues,
    UserOrderByInput: UserOrderByInputValues,
    VoteType: VoteTypeValues,
    CandidateOrderByInput: CandidateOrderByInputValues,
    LikeType: LikeTypeValues,
    QualificationOrderByInput: QualificationOrderByInputValues,
    CategoryType: CategoryTypeValues,
    TopicOrderByInput: TopicOrderByInputValues,
    PositionOrderByInput: PositionOrderByInputValues,
    CandidatePositionOrderByInput: CandidatePositionOrderByInputValues,
    UserVoteOrderByInput: UserVoteOrderByInputValues,
    UserQualificationLikeOrderByInput: UserQualificationLikeOrderByInputValues,
    UserPositionLikeOrderByInput: UserPositionLikeOrderByInputValues,
    PollType: PollTypeValues,
    PollOrderByInput: PollOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'candidate', args?: QueryCandidateArgs[] | false, alias?: string  } 
  | { name: 'candidates', args?: QueryCandidatesArgs[] | false, alias?: string  } 
  | { name: 'candidatesConnection', args?: QueryCandidatesConnectionArgs[] | false, alias?: string  } 
  | { name: 'qualification', args?: QueryQualificationArgs[] | false, alias?: string  } 
  | { name: 'qualifications', args?: QueryQualificationsArgs[] | false, alias?: string  } 
  | { name: 'qualificationsConnection', args?: QueryQualificationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'topic', args?: QueryTopicArgs[] | false, alias?: string  } 
  | { name: 'topics', args?: QueryTopicsArgs[] | false, alias?: string  } 
  | { name: 'topicsConnection', args?: QueryTopicsConnectionArgs[] | false, alias?: string  } 
  | { name: 'position', args?: QueryPositionArgs[] | false, alias?: string  } 
  | { name: 'positions', args?: QueryPositionsArgs[] | false, alias?: string  } 
  | { name: 'positionsConnection', args?: QueryPositionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'candidatePosition', args?: QueryCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'candidatePositions', args?: QueryCandidatePositionsArgs[] | false, alias?: string  } 
  | { name: 'candidatePositionsConnection', args?: QueryCandidatePositionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'userVote', args?: QueryUserVoteArgs[] | false, alias?: string  } 
  | { name: 'userVotes', args?: QueryUserVotesArgs[] | false, alias?: string  } 
  | { name: 'userVotesConnection', args?: QueryUserVotesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userQualificationLike', args?: QueryUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'userQualificationLikes', args?: QueryUserQualificationLikesArgs[] | false, alias?: string  } 
  | { name: 'userQualificationLikesConnection', args?: QueryUserQualificationLikesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userPositionLike', args?: QueryUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'userPositionLikes', args?: QueryUserPositionLikesArgs[] | false, alias?: string  } 
  | { name: 'userPositionLikesConnection', args?: QueryUserPositionLikesConnectionArgs[] | false, alias?: string  } 
  | { name: 'poll', args?: QueryPollArgs[] | false, alias?: string  } 
  | { name: 'polls', args?: QueryPollsArgs[] | false, alias?: string  } 
  | { name: 'pollsConnection', args?: QueryPollsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'candidate'
  | 'candidates'
  | 'candidatesConnection'
  | 'qualification'
  | 'qualifications'
  | 'qualificationsConnection'
  | 'topic'
  | 'topics'
  | 'topicsConnection'
  | 'position'
  | 'positions'
  | 'positionsConnection'
  | 'candidatePosition'
  | 'candidatePositions'
  | 'candidatePositionsConnection'
  | 'userVote'
  | 'userVotes'
  | 'userVotesConnection'
  | 'userQualificationLike'
  | 'userQualificationLikes'
  | 'userQualificationLikesConnection'
  | 'userPositionLike'
  | 'userPositionLikes'
  | 'userPositionLikesConnection'
  | 'poll'
  | 'polls'
  | 'pollsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCandidateArgs =
  | 'where'
type QueryCandidatesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCandidatesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryQualificationArgs =
  | 'where'
type QueryQualificationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryQualificationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTopicArgs =
  | 'where'
type QueryTopicsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTopicsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPositionArgs =
  | 'where'
type QueryPositionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPositionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCandidatePositionArgs =
  | 'where'
type QueryCandidatePositionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCandidatePositionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserVoteArgs =
  | 'where'
type QueryUserVotesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserVotesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserQualificationLikeArgs =
  | 'where'
type QueryUserQualificationLikesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserQualificationLikesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserPositionLikeArgs =
  | 'where'
type QueryUserPositionLikesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserPositionLikesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPollArgs =
  | 'where'
type QueryPollsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPollsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  candidate: {
    type: 'Candidate'
    args: Record<QueryCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CandidateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate | null> | prisma.Candidate | null
  }
  candidates: {
    type: 'Candidate'
    args: Record<QueryCandidatesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CandidateWhereInput | null, orderBy?: prisma.CandidateOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate[]> | prisma.Candidate[]
  }
  candidatesConnection: {
    type: 'CandidateConnection'
    args: Record<QueryCandidatesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CandidateWhereInput | null, orderBy?: prisma.CandidateOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidateConnection> | prisma.CandidateConnection
  }
  qualification: {
    type: 'Qualification'
    args: Record<QueryQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: QualificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification | null> | prisma.Qualification | null
  }
  qualifications: {
    type: 'Qualification'
    args: Record<QueryQualificationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: QualificationWhereInput | null, orderBy?: prisma.QualificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification[]> | prisma.Qualification[]
  }
  qualificationsConnection: {
    type: 'QualificationConnection'
    args: Record<QueryQualificationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: QualificationWhereInput | null, orderBy?: prisma.QualificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.QualificationConnection> | prisma.QualificationConnection
  }
  topic: {
    type: 'Topic'
    args: Record<QueryTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TopicWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic | null> | prisma.Topic | null
  }
  topics: {
    type: 'Topic'
    args: Record<QueryTopicsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TopicWhereInput | null, orderBy?: prisma.TopicOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic[]> | prisma.Topic[]
  }
  topicsConnection: {
    type: 'TopicConnection'
    args: Record<QueryTopicsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TopicWhereInput | null, orderBy?: prisma.TopicOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TopicConnection> | prisma.TopicConnection
  }
  position: {
    type: 'Position'
    args: Record<QueryPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  positions: {
    type: 'Position'
    args: Record<QueryPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PositionWhereInput | null, orderBy?: prisma.PositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position[]> | prisma.Position[]
  }
  positionsConnection: {
    type: 'PositionConnection'
    args: Record<QueryPositionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PositionWhereInput | null, orderBy?: prisma.PositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionConnection> | prisma.PositionConnection
  }
  candidatePosition: {
    type: 'CandidatePosition'
    args: Record<QueryCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CandidatePositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition | null> | prisma.CandidatePosition | null
  }
  candidatePositions: {
    type: 'CandidatePosition'
    args: Record<QueryCandidatePositionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CandidatePositionWhereInput | null, orderBy?: prisma.CandidatePositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition[]> | prisma.CandidatePosition[]
  }
  candidatePositionsConnection: {
    type: 'CandidatePositionConnection'
    args: Record<QueryCandidatePositionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CandidatePositionWhereInput | null, orderBy?: prisma.CandidatePositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePositionConnection> | prisma.CandidatePositionConnection
  }
  userVote: {
    type: 'UserVote'
    args: Record<QueryUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserVoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote | null> | prisma.UserVote | null
  }
  userVotes: {
    type: 'UserVote'
    args: Record<QueryUserVotesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserVoteWhereInput | null, orderBy?: prisma.UserVoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote[]> | prisma.UserVote[]
  }
  userVotesConnection: {
    type: 'UserVoteConnection'
    args: Record<QueryUserVotesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserVoteWhereInput | null, orderBy?: prisma.UserVoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVoteConnection> | prisma.UserVoteConnection
  }
  userQualificationLike: {
    type: 'UserQualificationLike'
    args: Record<QueryUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserQualificationLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike | null> | prisma.UserQualificationLike | null
  }
  userQualificationLikes: {
    type: 'UserQualificationLike'
    args: Record<QueryUserQualificationLikesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserQualificationLikeWhereInput | null, orderBy?: prisma.UserQualificationLikeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike[]> | prisma.UserQualificationLike[]
  }
  userQualificationLikesConnection: {
    type: 'UserQualificationLikeConnection'
    args: Record<QueryUserQualificationLikesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserQualificationLikeWhereInput | null, orderBy?: prisma.UserQualificationLikeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLikeConnection> | prisma.UserQualificationLikeConnection
  }
  userPositionLike: {
    type: 'UserPositionLike'
    args: Record<QueryUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserPositionLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike | null> | prisma.UserPositionLike | null
  }
  userPositionLikes: {
    type: 'UserPositionLike'
    args: Record<QueryUserPositionLikesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserPositionLikeWhereInput | null, orderBy?: prisma.UserPositionLikeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike[]> | prisma.UserPositionLike[]
  }
  userPositionLikesConnection: {
    type: 'UserPositionLikeConnection'
    args: Record<QueryUserPositionLikesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserPositionLikeWhereInput | null, orderBy?: prisma.UserPositionLikeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLikeConnection> | prisma.UserPositionLikeConnection
  }
  poll: {
    type: 'Poll'
    args: Record<QueryPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  polls: {
    type: 'Poll'
    args: Record<QueryPollsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PollWhereInput | null, orderBy?: prisma.PollOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll[]> | prisma.Poll[]
  }
  pollsConnection: {
    type: 'PollConnection'
    args: Record<QueryPollsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PollWhereInput | null, orderBy?: prisma.PollOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollConnection> | prisma.PollConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'
  | 'gender'
  | 'role'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  role: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Candidate

type CandidateObject =
  | CandidateFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'photo', args?: [] | false, alias?: string  } 
  | { name: 'party', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'current_office', args?: [] | false, alias?: string  } 
  | { name: 'age', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'latest_poll', args?: [] | false, alias?: string  } 
  | { name: 'latest_odds', args?: [] | false, alias?: string  } 
  | { name: 'prevote_score', args?: [] | false, alias?: string  } 
  | { name: 'bio_summary', args?: [] | false, alias?: string  } 
  | { name: 'vote_type', args?: [] | false, alias?: string  } 

type CandidateFields =
  | 'id'
  | 'name'
  | 'photo'
  | 'party'
  | 'state'
  | 'current_office'
  | 'age'
  | 'gender'
  | 'latest_poll'
  | 'latest_odds'
  | 'prevote_score'
  | 'bio_summary'
  | 'vote_type'



  

export interface CandidateFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  party: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  current_office: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  age: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Candidate">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  latest_poll: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest_odds: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  prevote_score: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bio_summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  vote_type: {
    type: 'VoteType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Candidate">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteType | null> | prisma.VoteType | null
  }
}
  

// Types for CandidateConnection

type CandidateConnectionObject =
  | CandidateConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CandidateConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CandidateConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CandidateEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CandidateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidateEdge[]> | prisma.CandidateEdge[]
  }
  aggregate: {
    type: 'AggregateCandidate'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCandidate> | prisma.AggregateCandidate
  }
}
  

// Types for CandidateEdge

type CandidateEdgeObject =
  | CandidateEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CandidateEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CandidateEdgeFieldDetails {
  node: {
    type: 'Candidate'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidateEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate> | prisma.Candidate
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCandidate

type AggregateCandidateObject =
  | AggregateCandidateFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCandidateFields =
  | 'count'



  

export interface AggregateCandidateFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Qualification

type QualificationObject =
  | QualificationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'summary', args?: [] | false, alias?: string  } 
  | { name: 'detail', args?: [] | false, alias?: string  } 
  | { name: 'years', args?: [] | false, alias?: string  } 
  | { name: 'rank', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'like_type', args?: [] | false, alias?: string  } 

type QualificationFields =
  | 'id'
  | 'name'
  | 'summary'
  | 'detail'
  | 'years'
  | 'rank'
  | 'candidateId'
  | 'like_type'



  

export interface QualificationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  detail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  years: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rank: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  like_type: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Qualification">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
}
  

// Types for QualificationConnection

type QualificationConnectionObject =
  | QualificationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type QualificationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface QualificationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"QualificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'QualificationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"QualificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.QualificationEdge[]> | prisma.QualificationEdge[]
  }
  aggregate: {
    type: 'AggregateQualification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"QualificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateQualification> | prisma.AggregateQualification
  }
}
  

// Types for QualificationEdge

type QualificationEdgeObject =
  | QualificationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type QualificationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface QualificationEdgeFieldDetails {
  node: {
    type: 'Qualification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"QualificationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification> | prisma.Qualification
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateQualification

type AggregateQualificationObject =
  | AggregateQualificationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateQualificationFields =
  | 'count'



  

export interface AggregateQualificationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Topic

type TopicObject =
  | TopicFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 

type TopicFields =
  | 'id'
  | 'name'
  | 'category'



  

export interface TopicFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'CategoryType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Topic">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryType> | prisma.CategoryType
  }
}
  

// Types for TopicConnection

type TopicConnectionObject =
  | TopicConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TopicConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TopicConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TopicConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TopicEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TopicConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TopicEdge[]> | prisma.TopicEdge[]
  }
  aggregate: {
    type: 'AggregateTopic'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TopicConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTopic> | prisma.AggregateTopic
  }
}
  

// Types for TopicEdge

type TopicEdgeObject =
  | TopicEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TopicEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TopicEdgeFieldDetails {
  node: {
    type: 'Topic'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TopicEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic> | prisma.Topic
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTopic

type AggregateTopicObject =
  | AggregateTopicFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTopicFields =
  | 'count'



  

export interface AggregateTopicFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Position

type PositionObject =
  | PositionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'summary', args?: [] | false, alias?: string  } 
  | { name: 'topicId', args?: [] | false, alias?: string  } 
  | { name: 'detail', args?: [] | false, alias?: string  } 
  | { name: 'like_type', args?: [] | false, alias?: string  } 

type PositionFields =
  | 'id'
  | 'name'
  | 'summary'
  | 'topicId'
  | 'detail'
  | 'like_type'



  

export interface PositionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  topicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  detail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  like_type: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Position">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
}
  

// Types for PositionConnection

type PositionConnectionObject =
  | PositionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PositionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PositionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PositionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionEdge[]> | prisma.PositionEdge[]
  }
  aggregate: {
    type: 'AggregatePosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePosition> | prisma.AggregatePosition
  }
}
  

// Types for PositionEdge

type PositionEdgeObject =
  | PositionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PositionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PositionEdgeFieldDetails {
  node: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePosition

type AggregatePositionObject =
  | AggregatePositionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePositionFields =
  | 'count'



  

export interface AggregatePositionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CandidatePosition

type CandidatePositionObject =
  | CandidatePositionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'positionId', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 
  | { name: 'rank', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type CandidatePositionFields =
  | 'id'
  | 'positionId'
  | 'candidateId'
  | 'time'
  | 'link'
  | 'rank'
  | 'latest'



  

export interface CandidatePositionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  positionId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  rank: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CandidatePositionConnection

type CandidatePositionConnectionObject =
  | CandidatePositionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CandidatePositionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CandidatePositionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidatePositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CandidatePositionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CandidatePositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePositionEdge[]> | prisma.CandidatePositionEdge[]
  }
  aggregate: {
    type: 'AggregateCandidatePosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidatePositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCandidatePosition> | prisma.AggregateCandidatePosition
  }
}
  

// Types for CandidatePositionEdge

type CandidatePositionEdgeObject =
  | CandidatePositionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CandidatePositionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CandidatePositionEdgeFieldDetails {
  node: {
    type: 'CandidatePosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidatePositionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition> | prisma.CandidatePosition
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCandidatePosition

type AggregateCandidatePositionObject =
  | AggregateCandidatePositionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCandidatePositionFields =
  | 'count'



  

export interface AggregateCandidatePositionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserVote

type UserVoteObject =
  | UserVoteFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'vote_type', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserVoteFields =
  | 'id'
  | 'candidateId'
  | 'userId'
  | 'vote_type'
  | 'time'
  | 'latest'



  

export interface UserVoteFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  vote_type: {
    type: 'VoteType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVote">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteType> | prisma.VoteType
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserVoteConnection

type UserVoteConnectionObject =
  | UserVoteConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserVoteConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserVoteConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserVoteEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserVoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVoteEdge[]> | prisma.UserVoteEdge[]
  }
  aggregate: {
    type: 'AggregateUserVote'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserVote> | prisma.AggregateUserVote
  }
}
  

// Types for UserVoteEdge

type UserVoteEdgeObject =
  | UserVoteEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserVoteEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserVoteEdgeFieldDetails {
  node: {
    type: 'UserVote'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVoteEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote> | prisma.UserVote
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserVote

type AggregateUserVoteObject =
  | AggregateUserVoteFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserVoteFields =
  | 'count'



  

export interface AggregateUserVoteFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserQualificationLike

type UserQualificationLikeObject =
  | UserQualificationLikeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'qualificationId', args?: [] | false, alias?: string  } 
  | { name: 'like', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserQualificationLikeFields =
  | 'id'
  | 'userId'
  | 'qualificationId'
  | 'like'
  | 'time'
  | 'latest'



  

export interface UserQualificationLikeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  qualificationId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  like: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLike">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType> | prisma.LikeType
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserQualificationLikeConnection

type UserQualificationLikeConnectionObject =
  | UserQualificationLikeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserQualificationLikeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserQualificationLikeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserQualificationLikeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLikeEdge[]> | prisma.UserQualificationLikeEdge[]
  }
  aggregate: {
    type: 'AggregateUserQualificationLike'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserQualificationLike> | prisma.AggregateUserQualificationLike
  }
}
  

// Types for UserQualificationLikeEdge

type UserQualificationLikeEdgeObject =
  | UserQualificationLikeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserQualificationLikeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserQualificationLikeEdgeFieldDetails {
  node: {
    type: 'UserQualificationLike'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike> | prisma.UserQualificationLike
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserQualificationLike

type AggregateUserQualificationLikeObject =
  | AggregateUserQualificationLikeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserQualificationLikeFields =
  | 'count'



  

export interface AggregateUserQualificationLikeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserPositionLike

type UserPositionLikeObject =
  | UserPositionLikeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'positionId', args?: [] | false, alias?: string  } 
  | { name: 'like', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserPositionLikeFields =
  | 'id'
  | 'userId'
  | 'candidateId'
  | 'positionId'
  | 'like'
  | 'time'
  | 'latest'



  

export interface UserPositionLikeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  positionId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  like: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPositionLike">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserPositionLikeConnection

type UserPositionLikeConnectionObject =
  | UserPositionLikeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserPositionLikeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserPositionLikeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPositionLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserPositionLikeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserPositionLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLikeEdge[]> | prisma.UserPositionLikeEdge[]
  }
  aggregate: {
    type: 'AggregateUserPositionLike'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPositionLikeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserPositionLike> | prisma.AggregateUserPositionLike
  }
}
  

// Types for UserPositionLikeEdge

type UserPositionLikeEdgeObject =
  | UserPositionLikeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserPositionLikeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserPositionLikeEdgeFieldDetails {
  node: {
    type: 'UserPositionLike'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPositionLikeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike> | prisma.UserPositionLike
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserPositionLike

type AggregateUserPositionLikeObject =
  | AggregateUserPositionLikeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserPositionLikeFields =
  | 'count'



  

export interface AggregateUserPositionLikeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Poll

type PollObject =
  | PollFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'poll_type', args?: [] | false, alias?: string  } 
  | { name: 'error_margin', args?: [] | false, alias?: string  } 
  | { name: 'link_to_poll', args?: [] | false, alias?: string  } 

type PollFields =
  | 'id'
  | 'userId'
  | 'date'
  | 'candidateId'
  | 'poll_type'
  | 'error_margin'
  | 'link_to_poll'



  

export interface PollFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  poll_type: {
    type: 'PollType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Poll">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollType> | prisma.PollType
  }
  error_margin: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link_to_poll: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PollConnection

type PollConnectionObject =
  | PollConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PollConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PollConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PollEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollEdge[]> | prisma.PollEdge[]
  }
  aggregate: {
    type: 'AggregatePoll'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePoll> | prisma.AggregatePoll
  }
}
  

// Types for PollEdge

type PollEdgeObject =
  | PollEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PollEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PollEdgeFieldDetails {
  node: {
    type: 'Poll'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePoll

type AggregatePollObject =
  | AggregatePollFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePollFields =
  | 'count'



  

export interface AggregatePollFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createCandidate', args?: MutationCreateCandidateArgs[] | false, alias?: string  } 
  | { name: 'updateCandidate', args?: MutationUpdateCandidateArgs[] | false, alias?: string  } 
  | { name: 'updateManyCandidates', args?: MutationUpdateManyCandidatesArgs[] | false, alias?: string  } 
  | { name: 'upsertCandidate', args?: MutationUpsertCandidateArgs[] | false, alias?: string  } 
  | { name: 'deleteCandidate', args?: MutationDeleteCandidateArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCandidates', args?: MutationDeleteManyCandidatesArgs[] | false, alias?: string  } 
  | { name: 'createQualification', args?: MutationCreateQualificationArgs[] | false, alias?: string  } 
  | { name: 'updateQualification', args?: MutationUpdateQualificationArgs[] | false, alias?: string  } 
  | { name: 'updateManyQualifications', args?: MutationUpdateManyQualificationsArgs[] | false, alias?: string  } 
  | { name: 'upsertQualification', args?: MutationUpsertQualificationArgs[] | false, alias?: string  } 
  | { name: 'deleteQualification', args?: MutationDeleteQualificationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyQualifications', args?: MutationDeleteManyQualificationsArgs[] | false, alias?: string  } 
  | { name: 'createTopic', args?: MutationCreateTopicArgs[] | false, alias?: string  } 
  | { name: 'updateTopic', args?: MutationUpdateTopicArgs[] | false, alias?: string  } 
  | { name: 'updateManyTopics', args?: MutationUpdateManyTopicsArgs[] | false, alias?: string  } 
  | { name: 'upsertTopic', args?: MutationUpsertTopicArgs[] | false, alias?: string  } 
  | { name: 'deleteTopic', args?: MutationDeleteTopicArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTopics', args?: MutationDeleteManyTopicsArgs[] | false, alias?: string  } 
  | { name: 'createPosition', args?: MutationCreatePositionArgs[] | false, alias?: string  } 
  | { name: 'updatePosition', args?: MutationUpdatePositionArgs[] | false, alias?: string  } 
  | { name: 'updateManyPositions', args?: MutationUpdateManyPositionsArgs[] | false, alias?: string  } 
  | { name: 'upsertPosition', args?: MutationUpsertPositionArgs[] | false, alias?: string  } 
  | { name: 'deletePosition', args?: MutationDeletePositionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPositions', args?: MutationDeleteManyPositionsArgs[] | false, alias?: string  } 
  | { name: 'createCandidatePosition', args?: MutationCreateCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'updateCandidatePosition', args?: MutationUpdateCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'updateManyCandidatePositions', args?: MutationUpdateManyCandidatePositionsArgs[] | false, alias?: string  } 
  | { name: 'upsertCandidatePosition', args?: MutationUpsertCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'deleteCandidatePosition', args?: MutationDeleteCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCandidatePositions', args?: MutationDeleteManyCandidatePositionsArgs[] | false, alias?: string  } 
  | { name: 'createUserVote', args?: MutationCreateUserVoteArgs[] | false, alias?: string  } 
  | { name: 'updateUserVote', args?: MutationUpdateUserVoteArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserVotes', args?: MutationUpdateManyUserVotesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserVote', args?: MutationUpsertUserVoteArgs[] | false, alias?: string  } 
  | { name: 'deleteUserVote', args?: MutationDeleteUserVoteArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserVotes', args?: MutationDeleteManyUserVotesArgs[] | false, alias?: string  } 
  | { name: 'createUserQualificationLike', args?: MutationCreateUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'updateUserQualificationLike', args?: MutationUpdateUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserQualificationLikes', args?: MutationUpdateManyUserQualificationLikesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserQualificationLike', args?: MutationUpsertUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'deleteUserQualificationLike', args?: MutationDeleteUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserQualificationLikes', args?: MutationDeleteManyUserQualificationLikesArgs[] | false, alias?: string  } 
  | { name: 'createUserPositionLike', args?: MutationCreateUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'updateUserPositionLike', args?: MutationUpdateUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserPositionLikes', args?: MutationUpdateManyUserPositionLikesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserPositionLike', args?: MutationUpsertUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'deleteUserPositionLike', args?: MutationDeleteUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserPositionLikes', args?: MutationDeleteManyUserPositionLikesArgs[] | false, alias?: string  } 
  | { name: 'createPoll', args?: MutationCreatePollArgs[] | false, alias?: string  } 
  | { name: 'updatePoll', args?: MutationUpdatePollArgs[] | false, alias?: string  } 
  | { name: 'updateManyPolls', args?: MutationUpdateManyPollsArgs[] | false, alias?: string  } 
  | { name: 'upsertPoll', args?: MutationUpsertPollArgs[] | false, alias?: string  } 
  | { name: 'deletePoll', args?: MutationDeletePollArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPolls', args?: MutationDeleteManyPollsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createCandidate'
  | 'updateCandidate'
  | 'updateManyCandidates'
  | 'upsertCandidate'
  | 'deleteCandidate'
  | 'deleteManyCandidates'
  | 'createQualification'
  | 'updateQualification'
  | 'updateManyQualifications'
  | 'upsertQualification'
  | 'deleteQualification'
  | 'deleteManyQualifications'
  | 'createTopic'
  | 'updateTopic'
  | 'updateManyTopics'
  | 'upsertTopic'
  | 'deleteTopic'
  | 'deleteManyTopics'
  | 'createPosition'
  | 'updatePosition'
  | 'updateManyPositions'
  | 'upsertPosition'
  | 'deletePosition'
  | 'deleteManyPositions'
  | 'createCandidatePosition'
  | 'updateCandidatePosition'
  | 'updateManyCandidatePositions'
  | 'upsertCandidatePosition'
  | 'deleteCandidatePosition'
  | 'deleteManyCandidatePositions'
  | 'createUserVote'
  | 'updateUserVote'
  | 'updateManyUserVotes'
  | 'upsertUserVote'
  | 'deleteUserVote'
  | 'deleteManyUserVotes'
  | 'createUserQualificationLike'
  | 'updateUserQualificationLike'
  | 'updateManyUserQualificationLikes'
  | 'upsertUserQualificationLike'
  | 'deleteUserQualificationLike'
  | 'deleteManyUserQualificationLikes'
  | 'createUserPositionLike'
  | 'updateUserPositionLike'
  | 'updateManyUserPositionLikes'
  | 'upsertUserPositionLike'
  | 'deleteUserPositionLike'
  | 'deleteManyUserPositionLikes'
  | 'createPoll'
  | 'updatePoll'
  | 'updateManyPolls'
  | 'upsertPoll'
  | 'deletePoll'
  | 'deleteManyPolls'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateCandidateArgs =
  | 'data'
type MutationUpdateCandidateArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCandidatesArgs =
  | 'data'
  | 'where'
type MutationUpsertCandidateArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCandidateArgs =
  | 'where'
type MutationDeleteManyCandidatesArgs =
  | 'where'
type MutationCreateQualificationArgs =
  | 'data'
type MutationUpdateQualificationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyQualificationsArgs =
  | 'data'
  | 'where'
type MutationUpsertQualificationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteQualificationArgs =
  | 'where'
type MutationDeleteManyQualificationsArgs =
  | 'where'
type MutationCreateTopicArgs =
  | 'data'
type MutationUpdateTopicArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTopicsArgs =
  | 'data'
  | 'where'
type MutationUpsertTopicArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTopicArgs =
  | 'where'
type MutationDeleteManyTopicsArgs =
  | 'where'
type MutationCreatePositionArgs =
  | 'data'
type MutationUpdatePositionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPositionsArgs =
  | 'data'
  | 'where'
type MutationUpsertPositionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePositionArgs =
  | 'where'
type MutationDeleteManyPositionsArgs =
  | 'where'
type MutationCreateCandidatePositionArgs =
  | 'data'
type MutationUpdateCandidatePositionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCandidatePositionsArgs =
  | 'data'
  | 'where'
type MutationUpsertCandidatePositionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCandidatePositionArgs =
  | 'where'
type MutationDeleteManyCandidatePositionsArgs =
  | 'where'
type MutationCreateUserVoteArgs =
  | 'data'
type MutationUpdateUserVoteArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserVotesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserVoteArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserVoteArgs =
  | 'where'
type MutationDeleteManyUserVotesArgs =
  | 'where'
type MutationCreateUserQualificationLikeArgs =
  | 'data'
type MutationUpdateUserQualificationLikeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserQualificationLikesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserQualificationLikeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserQualificationLikeArgs =
  | 'where'
type MutationDeleteManyUserQualificationLikesArgs =
  | 'where'
type MutationCreateUserPositionLikeArgs =
  | 'data'
type MutationUpdateUserPositionLikeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserPositionLikesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserPositionLikeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserPositionLikeArgs =
  | 'where'
type MutationDeleteManyUserPositionLikesArgs =
  | 'where'
type MutationCreatePollArgs =
  | 'data'
type MutationUpdatePollArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPollsArgs =
  | 'data'
  | 'where'
type MutationUpsertPollArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePollArgs =
  | 'where'
type MutationDeleteManyPollsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCandidate: {
    type: 'Candidate'
    args: Record<MutationCreateCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidateCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate> | prisma.Candidate
  }
  updateCandidate: {
    type: 'Candidate'
    args: Record<MutationUpdateCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidateUpdateInput, where: CandidateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate | null> | prisma.Candidate | null
  }
  updateManyCandidates: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCandidatesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidateUpdateManyMutationInput, where?: CandidateWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCandidate: {
    type: 'Candidate'
    args: Record<MutationUpsertCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CandidateWhereUniqueInput, create: CandidateCreateInput, update: CandidateUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate> | prisma.Candidate
  }
  deleteCandidate: {
    type: 'Candidate'
    args: Record<MutationDeleteCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CandidateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate | null> | prisma.Candidate | null
  }
  deleteManyCandidates: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCandidatesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CandidateWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createQualification: {
    type: 'Qualification'
    args: Record<MutationCreateQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: QualificationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification> | prisma.Qualification
  }
  updateQualification: {
    type: 'Qualification'
    args: Record<MutationUpdateQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: QualificationUpdateInput, where: QualificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification | null> | prisma.Qualification | null
  }
  updateManyQualifications: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyQualificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: QualificationUpdateManyMutationInput, where?: QualificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertQualification: {
    type: 'Qualification'
    args: Record<MutationUpsertQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: QualificationWhereUniqueInput, create: QualificationCreateInput, update: QualificationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification> | prisma.Qualification
  }
  deleteQualification: {
    type: 'Qualification'
    args: Record<MutationDeleteQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: QualificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification | null> | prisma.Qualification | null
  }
  deleteManyQualifications: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyQualificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: QualificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTopic: {
    type: 'Topic'
    args: Record<MutationCreateTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TopicCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic> | prisma.Topic
  }
  updateTopic: {
    type: 'Topic'
    args: Record<MutationUpdateTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TopicUpdateInput, where: TopicWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic | null> | prisma.Topic | null
  }
  updateManyTopics: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTopicsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TopicUpdateManyMutationInput, where?: TopicWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTopic: {
    type: 'Topic'
    args: Record<MutationUpsertTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TopicWhereUniqueInput, create: TopicCreateInput, update: TopicUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic> | prisma.Topic
  }
  deleteTopic: {
    type: 'Topic'
    args: Record<MutationDeleteTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TopicWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic | null> | prisma.Topic | null
  }
  deleteManyTopics: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTopicsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TopicWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPosition: {
    type: 'Position'
    args: Record<MutationCreatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  updatePosition: {
    type: 'Position'
    args: Record<MutationUpdatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionUpdateInput, where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  updateManyPositions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionUpdateManyMutationInput, where?: PositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPosition: {
    type: 'Position'
    args: Record<MutationUpsertPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PositionWhereUniqueInput, create: PositionCreateInput, update: PositionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  deletePosition: {
    type: 'Position'
    args: Record<MutationDeletePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  deleteManyPositions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCandidatePosition: {
    type: 'CandidatePosition'
    args: Record<MutationCreateCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidatePositionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition> | prisma.CandidatePosition
  }
  updateCandidatePosition: {
    type: 'CandidatePosition'
    args: Record<MutationUpdateCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidatePositionUpdateInput, where: CandidatePositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition | null> | prisma.CandidatePosition | null
  }
  updateManyCandidatePositions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCandidatePositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CandidatePositionUpdateManyMutationInput, where?: CandidatePositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCandidatePosition: {
    type: 'CandidatePosition'
    args: Record<MutationUpsertCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CandidatePositionWhereUniqueInput, create: CandidatePositionCreateInput, update: CandidatePositionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition> | prisma.CandidatePosition
  }
  deleteCandidatePosition: {
    type: 'CandidatePosition'
    args: Record<MutationDeleteCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CandidatePositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition | null> | prisma.CandidatePosition | null
  }
  deleteManyCandidatePositions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCandidatePositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CandidatePositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserVote: {
    type: 'UserVote'
    args: Record<MutationCreateUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserVoteCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote> | prisma.UserVote
  }
  updateUserVote: {
    type: 'UserVote'
    args: Record<MutationUpdateUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserVoteUpdateInput, where: UserVoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote | null> | prisma.UserVote | null
  }
  updateManyUserVotes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserVotesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserVoteUpdateManyMutationInput, where?: UserVoteWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserVote: {
    type: 'UserVote'
    args: Record<MutationUpsertUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserVoteWhereUniqueInput, create: UserVoteCreateInput, update: UserVoteUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote> | prisma.UserVote
  }
  deleteUserVote: {
    type: 'UserVote'
    args: Record<MutationDeleteUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserVoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote | null> | prisma.UserVote | null
  }
  deleteManyUserVotes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserVotesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserVoteWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserQualificationLike: {
    type: 'UserQualificationLike'
    args: Record<MutationCreateUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserQualificationLikeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike> | prisma.UserQualificationLike
  }
  updateUserQualificationLike: {
    type: 'UserQualificationLike'
    args: Record<MutationUpdateUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserQualificationLikeUpdateInput, where: UserQualificationLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike | null> | prisma.UserQualificationLike | null
  }
  updateManyUserQualificationLikes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserQualificationLikesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserQualificationLikeUpdateManyMutationInput, where?: UserQualificationLikeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserQualificationLike: {
    type: 'UserQualificationLike'
    args: Record<MutationUpsertUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserQualificationLikeWhereUniqueInput, create: UserQualificationLikeCreateInput, update: UserQualificationLikeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike> | prisma.UserQualificationLike
  }
  deleteUserQualificationLike: {
    type: 'UserQualificationLike'
    args: Record<MutationDeleteUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserQualificationLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike | null> | prisma.UserQualificationLike | null
  }
  deleteManyUserQualificationLikes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserQualificationLikesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserQualificationLikeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserPositionLike: {
    type: 'UserPositionLike'
    args: Record<MutationCreateUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPositionLikeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike> | prisma.UserPositionLike
  }
  updateUserPositionLike: {
    type: 'UserPositionLike'
    args: Record<MutationUpdateUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPositionLikeUpdateInput, where: UserPositionLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike | null> | prisma.UserPositionLike | null
  }
  updateManyUserPositionLikes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserPositionLikesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserPositionLikeUpdateManyMutationInput, where?: UserPositionLikeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserPositionLike: {
    type: 'UserPositionLike'
    args: Record<MutationUpsertUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserPositionLikeWhereUniqueInput, create: UserPositionLikeCreateInput, update: UserPositionLikeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike> | prisma.UserPositionLike
  }
  deleteUserPositionLike: {
    type: 'UserPositionLike'
    args: Record<MutationDeleteUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserPositionLikeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike | null> | prisma.UserPositionLike | null
  }
  deleteManyUserPositionLikes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserPositionLikesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserPositionLikeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPoll: {
    type: 'Poll'
    args: Record<MutationCreatePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  updatePoll: {
    type: 'Poll'
    args: Record<MutationUpdatePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollUpdateInput, where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  updateManyPolls: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPollsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollUpdateManyMutationInput, where?: PollWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPoll: {
    type: 'Poll'
    args: Record<MutationUpsertPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PollWhereUniqueInput, create: PollCreateInput, update: PollUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  deletePoll: {
    type: 'Poll'
    args: Record<MutationDeletePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  deleteManyPolls: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPollsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PollWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'candidate', args?: SubscriptionCandidateArgs[] | false, alias?: string  } 
  | { name: 'qualification', args?: SubscriptionQualificationArgs[] | false, alias?: string  } 
  | { name: 'topic', args?: SubscriptionTopicArgs[] | false, alias?: string  } 
  | { name: 'position', args?: SubscriptionPositionArgs[] | false, alias?: string  } 
  | { name: 'candidatePosition', args?: SubscriptionCandidatePositionArgs[] | false, alias?: string  } 
  | { name: 'userVote', args?: SubscriptionUserVoteArgs[] | false, alias?: string  } 
  | { name: 'userQualificationLike', args?: SubscriptionUserQualificationLikeArgs[] | false, alias?: string  } 
  | { name: 'userPositionLike', args?: SubscriptionUserPositionLikeArgs[] | false, alias?: string  } 
  | { name: 'poll', args?: SubscriptionPollArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'candidate'
  | 'qualification'
  | 'topic'
  | 'position'
  | 'candidatePosition'
  | 'userVote'
  | 'userQualificationLike'
  | 'userPositionLike'
  | 'poll'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionCandidateArgs =
  | 'where'
type SubscriptionQualificationArgs =
  | 'where'
type SubscriptionTopicArgs =
  | 'where'
type SubscriptionPositionArgs =
  | 'where'
type SubscriptionCandidatePositionArgs =
  | 'where'
type SubscriptionUserVoteArgs =
  | 'where'
type SubscriptionUserQualificationLikeArgs =
  | 'where'
type SubscriptionUserPositionLikeArgs =
  | 'where'
type SubscriptionPollArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  candidate: {
    type: 'CandidateSubscriptionPayload'
    args: Record<SubscriptionCandidateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CandidateSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidateSubscriptionPayload | null> | prisma.CandidateSubscriptionPayload | null
  }
  qualification: {
    type: 'QualificationSubscriptionPayload'
    args: Record<SubscriptionQualificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: QualificationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.QualificationSubscriptionPayload | null> | prisma.QualificationSubscriptionPayload | null
  }
  topic: {
    type: 'TopicSubscriptionPayload'
    args: Record<SubscriptionTopicArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TopicSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TopicSubscriptionPayload | null> | prisma.TopicSubscriptionPayload | null
  }
  position: {
    type: 'PositionSubscriptionPayload'
    args: Record<SubscriptionPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PositionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionSubscriptionPayload | null> | prisma.PositionSubscriptionPayload | null
  }
  candidatePosition: {
    type: 'CandidatePositionSubscriptionPayload'
    args: Record<SubscriptionCandidatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CandidatePositionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePositionSubscriptionPayload | null> | prisma.CandidatePositionSubscriptionPayload | null
  }
  userVote: {
    type: 'UserVoteSubscriptionPayload'
    args: Record<SubscriptionUserVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserVoteSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVoteSubscriptionPayload | null> | prisma.UserVoteSubscriptionPayload | null
  }
  userQualificationLike: {
    type: 'UserQualificationLikeSubscriptionPayload'
    args: Record<SubscriptionUserQualificationLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserQualificationLikeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLikeSubscriptionPayload | null> | prisma.UserQualificationLikeSubscriptionPayload | null
  }
  userPositionLike: {
    type: 'UserPositionLikeSubscriptionPayload'
    args: Record<SubscriptionUserPositionLikeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserPositionLikeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLikeSubscriptionPayload | null> | prisma.UserPositionLikeSubscriptionPayload | null
  }
  poll: {
    type: 'PollSubscriptionPayload'
    args: Record<SubscriptionPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PollSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollSubscriptionPayload | null> | prisma.PollSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'
  | 'gender'
  | 'role'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  role: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CandidateSubscriptionPayload

type CandidateSubscriptionPayloadObject =
  | CandidateSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CandidateSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CandidateSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Candidate'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Candidate | null> | prisma.Candidate | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CandidatePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePreviousValues | null> | prisma.CandidatePreviousValues | null
  }
}
  

// Types for CandidatePreviousValues

type CandidatePreviousValuesObject =
  | CandidatePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'photo', args?: [] | false, alias?: string  } 
  | { name: 'party', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'current_office', args?: [] | false, alias?: string  } 
  | { name: 'age', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'latest_poll', args?: [] | false, alias?: string  } 
  | { name: 'latest_odds', args?: [] | false, alias?: string  } 
  | { name: 'prevote_score', args?: [] | false, alias?: string  } 
  | { name: 'bio_summary', args?: [] | false, alias?: string  } 
  | { name: 'vote_type', args?: [] | false, alias?: string  } 

type CandidatePreviousValuesFields =
  | 'id'
  | 'name'
  | 'photo'
  | 'party'
  | 'state'
  | 'current_office'
  | 'age'
  | 'gender'
  | 'latest_poll'
  | 'latest_odds'
  | 'prevote_score'
  | 'bio_summary'
  | 'vote_type'



  

export interface CandidatePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  party: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  current_office: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  age: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidatePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  latest_poll: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest_odds: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  prevote_score: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bio_summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  vote_type: {
    type: 'VoteType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidatePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteType | null> | prisma.VoteType | null
  }
}
  

// Types for QualificationSubscriptionPayload

type QualificationSubscriptionPayloadObject =
  | QualificationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type QualificationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface QualificationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"QualificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Qualification'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"QualificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Qualification | null> | prisma.Qualification | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'QualificationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"QualificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.QualificationPreviousValues | null> | prisma.QualificationPreviousValues | null
  }
}
  

// Types for QualificationPreviousValues

type QualificationPreviousValuesObject =
  | QualificationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'summary', args?: [] | false, alias?: string  } 
  | { name: 'detail', args?: [] | false, alias?: string  } 
  | { name: 'years', args?: [] | false, alias?: string  } 
  | { name: 'rank', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'like_type', args?: [] | false, alias?: string  } 

type QualificationPreviousValuesFields =
  | 'id'
  | 'name'
  | 'summary'
  | 'detail'
  | 'years'
  | 'rank'
  | 'candidateId'
  | 'like_type'



  

export interface QualificationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  detail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  years: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rank: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  like_type: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"QualificationPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
}
  

// Types for TopicSubscriptionPayload

type TopicSubscriptionPayloadObject =
  | TopicSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TopicSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TopicSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TopicSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Topic'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TopicSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Topic | null> | prisma.Topic | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TopicPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TopicSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TopicPreviousValues | null> | prisma.TopicPreviousValues | null
  }
}
  

// Types for TopicPreviousValues

type TopicPreviousValuesObject =
  | TopicPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 

type TopicPreviousValuesFields =
  | 'id'
  | 'name'
  | 'category'



  

export interface TopicPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'CategoryType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TopicPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryType> | prisma.CategoryType
  }
}
  

// Types for PositionSubscriptionPayload

type PositionSubscriptionPayloadObject =
  | PositionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PositionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PositionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PositionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionPreviousValues | null> | prisma.PositionPreviousValues | null
  }
}
  

// Types for PositionPreviousValues

type PositionPreviousValuesObject =
  | PositionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'summary', args?: [] | false, alias?: string  } 
  | { name: 'topicId', args?: [] | false, alias?: string  } 
  | { name: 'detail', args?: [] | false, alias?: string  } 
  | { name: 'like_type', args?: [] | false, alias?: string  } 

type PositionPreviousValuesFields =
  | 'id'
  | 'name'
  | 'summary'
  | 'topicId'
  | 'detail'
  | 'like_type'



  

export interface PositionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  summary: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  topicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  detail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  like_type: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PositionPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
}
  

// Types for CandidatePositionSubscriptionPayload

type CandidatePositionSubscriptionPayloadObject =
  | CandidatePositionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CandidatePositionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CandidatePositionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CandidatePositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CandidatePosition'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidatePositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePosition | null> | prisma.CandidatePosition | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CandidatePositionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CandidatePositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CandidatePositionPreviousValues | null> | prisma.CandidatePositionPreviousValues | null
  }
}
  

// Types for CandidatePositionPreviousValues

type CandidatePositionPreviousValuesObject =
  | CandidatePositionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'positionId', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 
  | { name: 'rank', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type CandidatePositionPreviousValuesFields =
  | 'id'
  | 'positionId'
  | 'candidateId'
  | 'time'
  | 'link'
  | 'rank'
  | 'latest'



  

export interface CandidatePositionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  positionId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  rank: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserVoteSubscriptionPayload

type UserVoteSubscriptionPayloadObject =
  | UserVoteSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserVoteSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserVoteSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserVote'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserVoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVote | null> | prisma.UserVote | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserVotePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserVoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserVotePreviousValues | null> | prisma.UserVotePreviousValues | null
  }
}
  

// Types for UserVotePreviousValues

type UserVotePreviousValuesObject =
  | UserVotePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'vote_type', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserVotePreviousValuesFields =
  | 'id'
  | 'candidateId'
  | 'userId'
  | 'vote_type'
  | 'time'
  | 'latest'



  

export interface UserVotePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  vote_type: {
    type: 'VoteType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserVotePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteType> | prisma.VoteType
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserQualificationLikeSubscriptionPayload

type UserQualificationLikeSubscriptionPayloadObject =
  | UserQualificationLikeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserQualificationLikeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserQualificationLikeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserQualificationLike'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserQualificationLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLike | null> | prisma.UserQualificationLike | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserQualificationLikePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserQualificationLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserQualificationLikePreviousValues | null> | prisma.UserQualificationLikePreviousValues | null
  }
}
  

// Types for UserQualificationLikePreviousValues

type UserQualificationLikePreviousValuesObject =
  | UserQualificationLikePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'qualificationId', args?: [] | false, alias?: string  } 
  | { name: 'like', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserQualificationLikePreviousValuesFields =
  | 'id'
  | 'userId'
  | 'qualificationId'
  | 'like'
  | 'time'
  | 'latest'



  

export interface UserQualificationLikePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  qualificationId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  like: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserQualificationLikePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType> | prisma.LikeType
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserPositionLikeSubscriptionPayload

type UserPositionLikeSubscriptionPayloadObject =
  | UserPositionLikeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserPositionLikeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserPositionLikeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPositionLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserPositionLike'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPositionLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLike | null> | prisma.UserPositionLike | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPositionLikePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPositionLikeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPositionLikePreviousValues | null> | prisma.UserPositionLikePreviousValues | null
  }
}
  

// Types for UserPositionLikePreviousValues

type UserPositionLikePreviousValuesObject =
  | UserPositionLikePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'positionId', args?: [] | false, alias?: string  } 
  | { name: 'like', args?: [] | false, alias?: string  } 
  | { name: 'time', args?: [] | false, alias?: string  } 
  | { name: 'latest', args?: [] | false, alias?: string  } 

type UserPositionLikePreviousValuesFields =
  | 'id'
  | 'userId'
  | 'candidateId'
  | 'positionId'
  | 'like'
  | 'time'
  | 'latest'



  

export interface UserPositionLikePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  positionId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  like: {
    type: 'LikeType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPositionLikePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LikeType | null> | prisma.LikeType | null
  }
  time: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latest: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PollSubscriptionPayload

type PollSubscriptionPayloadObject =
  | PollSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PollSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PollSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Poll'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PollPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollPreviousValues | null> | prisma.PollPreviousValues | null
  }
}
  

// Types for PollPreviousValues

type PollPreviousValuesObject =
  | PollPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userId', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'candidateId', args?: [] | false, alias?: string  } 
  | { name: 'poll_type', args?: [] | false, alias?: string  } 
  | { name: 'error_margin', args?: [] | false, alias?: string  } 
  | { name: 'link_to_poll', args?: [] | false, alias?: string  } 

type PollPreviousValuesFields =
  | 'id'
  | 'userId'
  | 'date'
  | 'candidateId'
  | 'poll_type'
  | 'error_margin'
  | 'link_to_poll'



  

export interface PollPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  candidateId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  poll_type: {
    type: 'PollType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollType> | prisma.PollType
  }
  error_margin: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link_to_poll: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  gender?: prisma.Gender | null
  gender_not?: prisma.Gender | null
  gender_in?: prisma.Gender[]
  gender_not_in?: prisma.Gender[]
  role?: number | null
  role_not?: number | null
  role_in?: number[]
  role_not_in?: number[]
  role_lt?: number | null
  role_lte?: number | null
  role_gt?: number | null
  role_gte?: number | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'role_lt', alias?: string  } 
  | { name: 'role_lte', alias?: string  } 
  | { name: 'role_gt', alias?: string  } 
  | { name: 'role_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CandidateWhereUniqueInput {
  id?: string | null
}
export type CandidateWhereUniqueInputInputObject =
  | Extract<keyof CandidateWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CandidateWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  photo?: string | null
  photo_not?: string | null
  photo_in?: string[]
  photo_not_in?: string[]
  photo_lt?: string | null
  photo_lte?: string | null
  photo_gt?: string | null
  photo_gte?: string | null
  photo_contains?: string | null
  photo_not_contains?: string | null
  photo_starts_with?: string | null
  photo_not_starts_with?: string | null
  photo_ends_with?: string | null
  photo_not_ends_with?: string | null
  party?: string | null
  party_not?: string | null
  party_in?: string[]
  party_not_in?: string[]
  party_lt?: string | null
  party_lte?: string | null
  party_gt?: string | null
  party_gte?: string | null
  party_contains?: string | null
  party_not_contains?: string | null
  party_starts_with?: string | null
  party_not_starts_with?: string | null
  party_ends_with?: string | null
  party_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  current_office?: string | null
  current_office_not?: string | null
  current_office_in?: string[]
  current_office_not_in?: string[]
  current_office_lt?: string | null
  current_office_lte?: string | null
  current_office_gt?: string | null
  current_office_gte?: string | null
  current_office_contains?: string | null
  current_office_not_contains?: string | null
  current_office_starts_with?: string | null
  current_office_not_starts_with?: string | null
  current_office_ends_with?: string | null
  current_office_not_ends_with?: string | null
  age?: number | null
  age_not?: number | null
  age_in?: number[]
  age_not_in?: number[]
  age_lt?: number | null
  age_lte?: number | null
  age_gt?: number | null
  age_gte?: number | null
  gender?: prisma.Gender | null
  gender_not?: prisma.Gender | null
  gender_in?: prisma.Gender[]
  gender_not_in?: prisma.Gender[]
  latest_poll?: number | null
  latest_poll_not?: number | null
  latest_poll_in?: number[]
  latest_poll_not_in?: number[]
  latest_poll_lt?: number | null
  latest_poll_lte?: number | null
  latest_poll_gt?: number | null
  latest_poll_gte?: number | null
  latest_odds?: number | null
  latest_odds_not?: number | null
  latest_odds_in?: number[]
  latest_odds_not_in?: number[]
  latest_odds_lt?: number | null
  latest_odds_lte?: number | null
  latest_odds_gt?: number | null
  latest_odds_gte?: number | null
  prevote_score?: number | null
  prevote_score_not?: number | null
  prevote_score_in?: number[]
  prevote_score_not_in?: number[]
  prevote_score_lt?: number | null
  prevote_score_lte?: number | null
  prevote_score_gt?: number | null
  prevote_score_gte?: number | null
  bio_summary?: string | null
  bio_summary_not?: string | null
  bio_summary_in?: string[]
  bio_summary_not_in?: string[]
  bio_summary_lt?: string | null
  bio_summary_lte?: string | null
  bio_summary_gt?: string | null
  bio_summary_gte?: string | null
  bio_summary_contains?: string | null
  bio_summary_not_contains?: string | null
  bio_summary_starts_with?: string | null
  bio_summary_not_starts_with?: string | null
  bio_summary_ends_with?: string | null
  bio_summary_not_ends_with?: string | null
  vote_type?: prisma.VoteType | null
  vote_type_not?: prisma.VoteType | null
  vote_type_in?: prisma.VoteType[]
  vote_type_not_in?: prisma.VoteType[]
  AND?: CandidateWhereInput[]
  OR?: CandidateWhereInput[]
  NOT?: CandidateWhereInput[]
}
export type CandidateWhereInputInputObject =
  | Extract<keyof CandidateWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'photo', alias?: string  } 
  | { name: 'photo_not', alias?: string  } 
  | { name: 'photo_in', alias?: string  } 
  | { name: 'photo_not_in', alias?: string  } 
  | { name: 'photo_lt', alias?: string  } 
  | { name: 'photo_lte', alias?: string  } 
  | { name: 'photo_gt', alias?: string  } 
  | { name: 'photo_gte', alias?: string  } 
  | { name: 'photo_contains', alias?: string  } 
  | { name: 'photo_not_contains', alias?: string  } 
  | { name: 'photo_starts_with', alias?: string  } 
  | { name: 'photo_not_starts_with', alias?: string  } 
  | { name: 'photo_ends_with', alias?: string  } 
  | { name: 'photo_not_ends_with', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'party_not', alias?: string  } 
  | { name: 'party_in', alias?: string  } 
  | { name: 'party_not_in', alias?: string  } 
  | { name: 'party_lt', alias?: string  } 
  | { name: 'party_lte', alias?: string  } 
  | { name: 'party_gt', alias?: string  } 
  | { name: 'party_gte', alias?: string  } 
  | { name: 'party_contains', alias?: string  } 
  | { name: 'party_not_contains', alias?: string  } 
  | { name: 'party_starts_with', alias?: string  } 
  | { name: 'party_not_starts_with', alias?: string  } 
  | { name: 'party_ends_with', alias?: string  } 
  | { name: 'party_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'current_office', alias?: string  } 
  | { name: 'current_office_not', alias?: string  } 
  | { name: 'current_office_in', alias?: string  } 
  | { name: 'current_office_not_in', alias?: string  } 
  | { name: 'current_office_lt', alias?: string  } 
  | { name: 'current_office_lte', alias?: string  } 
  | { name: 'current_office_gt', alias?: string  } 
  | { name: 'current_office_gte', alias?: string  } 
  | { name: 'current_office_contains', alias?: string  } 
  | { name: 'current_office_not_contains', alias?: string  } 
  | { name: 'current_office_starts_with', alias?: string  } 
  | { name: 'current_office_not_starts_with', alias?: string  } 
  | { name: 'current_office_ends_with', alias?: string  } 
  | { name: 'current_office_not_ends_with', alias?: string  } 
  | { name: 'age', alias?: string  } 
  | { name: 'age_not', alias?: string  } 
  | { name: 'age_in', alias?: string  } 
  | { name: 'age_not_in', alias?: string  } 
  | { name: 'age_lt', alias?: string  } 
  | { name: 'age_lte', alias?: string  } 
  | { name: 'age_gt', alias?: string  } 
  | { name: 'age_gte', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'latest_poll', alias?: string  } 
  | { name: 'latest_poll_not', alias?: string  } 
  | { name: 'latest_poll_in', alias?: string  } 
  | { name: 'latest_poll_not_in', alias?: string  } 
  | { name: 'latest_poll_lt', alias?: string  } 
  | { name: 'latest_poll_lte', alias?: string  } 
  | { name: 'latest_poll_gt', alias?: string  } 
  | { name: 'latest_poll_gte', alias?: string  } 
  | { name: 'latest_odds', alias?: string  } 
  | { name: 'latest_odds_not', alias?: string  } 
  | { name: 'latest_odds_in', alias?: string  } 
  | { name: 'latest_odds_not_in', alias?: string  } 
  | { name: 'latest_odds_lt', alias?: string  } 
  | { name: 'latest_odds_lte', alias?: string  } 
  | { name: 'latest_odds_gt', alias?: string  } 
  | { name: 'latest_odds_gte', alias?: string  } 
  | { name: 'prevote_score', alias?: string  } 
  | { name: 'prevote_score_not', alias?: string  } 
  | { name: 'prevote_score_in', alias?: string  } 
  | { name: 'prevote_score_not_in', alias?: string  } 
  | { name: 'prevote_score_lt', alias?: string  } 
  | { name: 'prevote_score_lte', alias?: string  } 
  | { name: 'prevote_score_gt', alias?: string  } 
  | { name: 'prevote_score_gte', alias?: string  } 
  | { name: 'bio_summary', alias?: string  } 
  | { name: 'bio_summary_not', alias?: string  } 
  | { name: 'bio_summary_in', alias?: string  } 
  | { name: 'bio_summary_not_in', alias?: string  } 
  | { name: 'bio_summary_lt', alias?: string  } 
  | { name: 'bio_summary_lte', alias?: string  } 
  | { name: 'bio_summary_gt', alias?: string  } 
  | { name: 'bio_summary_gte', alias?: string  } 
  | { name: 'bio_summary_contains', alias?: string  } 
  | { name: 'bio_summary_not_contains', alias?: string  } 
  | { name: 'bio_summary_starts_with', alias?: string  } 
  | { name: 'bio_summary_not_starts_with', alias?: string  } 
  | { name: 'bio_summary_ends_with', alias?: string  } 
  | { name: 'bio_summary_not_ends_with', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  | { name: 'vote_type_not', alias?: string  } 
  | { name: 'vote_type_in', alias?: string  } 
  | { name: 'vote_type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface QualificationWhereUniqueInput {
  id?: string | null
}
export type QualificationWhereUniqueInputInputObject =
  | Extract<keyof QualificationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface QualificationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  summary?: string | null
  summary_not?: string | null
  summary_in?: string[]
  summary_not_in?: string[]
  summary_lt?: string | null
  summary_lte?: string | null
  summary_gt?: string | null
  summary_gte?: string | null
  summary_contains?: string | null
  summary_not_contains?: string | null
  summary_starts_with?: string | null
  summary_not_starts_with?: string | null
  summary_ends_with?: string | null
  summary_not_ends_with?: string | null
  detail?: string | null
  detail_not?: string | null
  detail_in?: string[]
  detail_not_in?: string[]
  detail_lt?: string | null
  detail_lte?: string | null
  detail_gt?: string | null
  detail_gte?: string | null
  detail_contains?: string | null
  detail_not_contains?: string | null
  detail_starts_with?: string | null
  detail_not_starts_with?: string | null
  detail_ends_with?: string | null
  detail_not_ends_with?: string | null
  years?: number | null
  years_not?: number | null
  years_in?: number[]
  years_not_in?: number[]
  years_lt?: number | null
  years_lte?: number | null
  years_gt?: number | null
  years_gte?: number | null
  rank?: number | null
  rank_not?: number | null
  rank_in?: number[]
  rank_not_in?: number[]
  rank_lt?: number | null
  rank_lte?: number | null
  rank_gt?: number | null
  rank_gte?: number | null
  candidateId?: string | null
  candidateId_not?: string | null
  candidateId_in?: string[]
  candidateId_not_in?: string[]
  candidateId_lt?: string | null
  candidateId_lte?: string | null
  candidateId_gt?: string | null
  candidateId_gte?: string | null
  candidateId_contains?: string | null
  candidateId_not_contains?: string | null
  candidateId_starts_with?: string | null
  candidateId_not_starts_with?: string | null
  candidateId_ends_with?: string | null
  candidateId_not_ends_with?: string | null
  like_type?: prisma.LikeType | null
  like_type_not?: prisma.LikeType | null
  like_type_in?: prisma.LikeType[]
  like_type_not_in?: prisma.LikeType[]
  AND?: QualificationWhereInput[]
  OR?: QualificationWhereInput[]
  NOT?: QualificationWhereInput[]
}
export type QualificationWhereInputInputObject =
  | Extract<keyof QualificationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'summary_not', alias?: string  } 
  | { name: 'summary_in', alias?: string  } 
  | { name: 'summary_not_in', alias?: string  } 
  | { name: 'summary_lt', alias?: string  } 
  | { name: 'summary_lte', alias?: string  } 
  | { name: 'summary_gt', alias?: string  } 
  | { name: 'summary_gte', alias?: string  } 
  | { name: 'summary_contains', alias?: string  } 
  | { name: 'summary_not_contains', alias?: string  } 
  | { name: 'summary_starts_with', alias?: string  } 
  | { name: 'summary_not_starts_with', alias?: string  } 
  | { name: 'summary_ends_with', alias?: string  } 
  | { name: 'summary_not_ends_with', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'detail_not', alias?: string  } 
  | { name: 'detail_in', alias?: string  } 
  | { name: 'detail_not_in', alias?: string  } 
  | { name: 'detail_lt', alias?: string  } 
  | { name: 'detail_lte', alias?: string  } 
  | { name: 'detail_gt', alias?: string  } 
  | { name: 'detail_gte', alias?: string  } 
  | { name: 'detail_contains', alias?: string  } 
  | { name: 'detail_not_contains', alias?: string  } 
  | { name: 'detail_starts_with', alias?: string  } 
  | { name: 'detail_not_starts_with', alias?: string  } 
  | { name: 'detail_ends_with', alias?: string  } 
  | { name: 'detail_not_ends_with', alias?: string  } 
  | { name: 'years', alias?: string  } 
  | { name: 'years_not', alias?: string  } 
  | { name: 'years_in', alias?: string  } 
  | { name: 'years_not_in', alias?: string  } 
  | { name: 'years_lt', alias?: string  } 
  | { name: 'years_lte', alias?: string  } 
  | { name: 'years_gt', alias?: string  } 
  | { name: 'years_gte', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'rank_not', alias?: string  } 
  | { name: 'rank_in', alias?: string  } 
  | { name: 'rank_not_in', alias?: string  } 
  | { name: 'rank_lt', alias?: string  } 
  | { name: 'rank_lte', alias?: string  } 
  | { name: 'rank_gt', alias?: string  } 
  | { name: 'rank_gte', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'candidateId_not', alias?: string  } 
  | { name: 'candidateId_in', alias?: string  } 
  | { name: 'candidateId_not_in', alias?: string  } 
  | { name: 'candidateId_lt', alias?: string  } 
  | { name: 'candidateId_lte', alias?: string  } 
  | { name: 'candidateId_gt', alias?: string  } 
  | { name: 'candidateId_gte', alias?: string  } 
  | { name: 'candidateId_contains', alias?: string  } 
  | { name: 'candidateId_not_contains', alias?: string  } 
  | { name: 'candidateId_starts_with', alias?: string  } 
  | { name: 'candidateId_not_starts_with', alias?: string  } 
  | { name: 'candidateId_ends_with', alias?: string  } 
  | { name: 'candidateId_not_ends_with', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  | { name: 'like_type_not', alias?: string  } 
  | { name: 'like_type_in', alias?: string  } 
  | { name: 'like_type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TopicWhereUniqueInput {
  id?: string | null
}
export type TopicWhereUniqueInputInputObject =
  | Extract<keyof TopicWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TopicWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  category?: prisma.CategoryType | null
  category_not?: prisma.CategoryType | null
  category_in?: prisma.CategoryType[]
  category_not_in?: prisma.CategoryType[]
  AND?: TopicWhereInput[]
  OR?: TopicWhereInput[]
  NOT?: TopicWhereInput[]
}
export type TopicWhereInputInputObject =
  | Extract<keyof TopicWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PositionWhereUniqueInput {
  id?: string | null
}
export type PositionWhereUniqueInputInputObject =
  | Extract<keyof PositionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PositionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  summary?: string | null
  summary_not?: string | null
  summary_in?: string[]
  summary_not_in?: string[]
  summary_lt?: string | null
  summary_lte?: string | null
  summary_gt?: string | null
  summary_gte?: string | null
  summary_contains?: string | null
  summary_not_contains?: string | null
  summary_starts_with?: string | null
  summary_not_starts_with?: string | null
  summary_ends_with?: string | null
  summary_not_ends_with?: string | null
  topicId?: string | null
  topicId_not?: string | null
  topicId_in?: string[]
  topicId_not_in?: string[]
  topicId_lt?: string | null
  topicId_lte?: string | null
  topicId_gt?: string | null
  topicId_gte?: string | null
  topicId_contains?: string | null
  topicId_not_contains?: string | null
  topicId_starts_with?: string | null
  topicId_not_starts_with?: string | null
  topicId_ends_with?: string | null
  topicId_not_ends_with?: string | null
  detail?: string | null
  detail_not?: string | null
  detail_in?: string[]
  detail_not_in?: string[]
  detail_lt?: string | null
  detail_lte?: string | null
  detail_gt?: string | null
  detail_gte?: string | null
  detail_contains?: string | null
  detail_not_contains?: string | null
  detail_starts_with?: string | null
  detail_not_starts_with?: string | null
  detail_ends_with?: string | null
  detail_not_ends_with?: string | null
  like_type?: prisma.LikeType | null
  like_type_not?: prisma.LikeType | null
  like_type_in?: prisma.LikeType[]
  like_type_not_in?: prisma.LikeType[]
  AND?: PositionWhereInput[]
  OR?: PositionWhereInput[]
  NOT?: PositionWhereInput[]
}
export type PositionWhereInputInputObject =
  | Extract<keyof PositionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'summary_not', alias?: string  } 
  | { name: 'summary_in', alias?: string  } 
  | { name: 'summary_not_in', alias?: string  } 
  | { name: 'summary_lt', alias?: string  } 
  | { name: 'summary_lte', alias?: string  } 
  | { name: 'summary_gt', alias?: string  } 
  | { name: 'summary_gte', alias?: string  } 
  | { name: 'summary_contains', alias?: string  } 
  | { name: 'summary_not_contains', alias?: string  } 
  | { name: 'summary_starts_with', alias?: string  } 
  | { name: 'summary_not_starts_with', alias?: string  } 
  | { name: 'summary_ends_with', alias?: string  } 
  | { name: 'summary_not_ends_with', alias?: string  } 
  | { name: 'topicId', alias?: string  } 
  | { name: 'topicId_not', alias?: string  } 
  | { name: 'topicId_in', alias?: string  } 
  | { name: 'topicId_not_in', alias?: string  } 
  | { name: 'topicId_lt', alias?: string  } 
  | { name: 'topicId_lte', alias?: string  } 
  | { name: 'topicId_gt', alias?: string  } 
  | { name: 'topicId_gte', alias?: string  } 
  | { name: 'topicId_contains', alias?: string  } 
  | { name: 'topicId_not_contains', alias?: string  } 
  | { name: 'topicId_starts_with', alias?: string  } 
  | { name: 'topicId_not_starts_with', alias?: string  } 
  | { name: 'topicId_ends_with', alias?: string  } 
  | { name: 'topicId_not_ends_with', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'detail_not', alias?: string  } 
  | { name: 'detail_in', alias?: string  } 
  | { name: 'detail_not_in', alias?: string  } 
  | { name: 'detail_lt', alias?: string  } 
  | { name: 'detail_lte', alias?: string  } 
  | { name: 'detail_gt', alias?: string  } 
  | { name: 'detail_gte', alias?: string  } 
  | { name: 'detail_contains', alias?: string  } 
  | { name: 'detail_not_contains', alias?: string  } 
  | { name: 'detail_starts_with', alias?: string  } 
  | { name: 'detail_not_starts_with', alias?: string  } 
  | { name: 'detail_ends_with', alias?: string  } 
  | { name: 'detail_not_ends_with', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  | { name: 'like_type_not', alias?: string  } 
  | { name: 'like_type_in', alias?: string  } 
  | { name: 'like_type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CandidatePositionWhereUniqueInput {
  id?: string | null
}
export type CandidatePositionWhereUniqueInputInputObject =
  | Extract<keyof CandidatePositionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CandidatePositionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  positionId?: string | null
  positionId_not?: string | null
  positionId_in?: string[]
  positionId_not_in?: string[]
  positionId_lt?: string | null
  positionId_lte?: string | null
  positionId_gt?: string | null
  positionId_gte?: string | null
  positionId_contains?: string | null
  positionId_not_contains?: string | null
  positionId_starts_with?: string | null
  positionId_not_starts_with?: string | null
  positionId_ends_with?: string | null
  positionId_not_ends_with?: string | null
  candidateId?: string | null
  candidateId_not?: string | null
  candidateId_in?: string[]
  candidateId_not_in?: string[]
  candidateId_lt?: string | null
  candidateId_lte?: string | null
  candidateId_gt?: string | null
  candidateId_gte?: string | null
  candidateId_contains?: string | null
  candidateId_not_contains?: string | null
  candidateId_starts_with?: string | null
  candidateId_not_starts_with?: string | null
  candidateId_ends_with?: string | null
  candidateId_not_ends_with?: string | null
  time?: string | null
  time_not?: string | null
  time_in?: string[]
  time_not_in?: string[]
  time_lt?: string | null
  time_lte?: string | null
  time_gt?: string | null
  time_gte?: string | null
  link?: string | null
  link_not?: string | null
  link_in?: string[]
  link_not_in?: string[]
  link_lt?: string | null
  link_lte?: string | null
  link_gt?: string | null
  link_gte?: string | null
  link_contains?: string | null
  link_not_contains?: string | null
  link_starts_with?: string | null
  link_not_starts_with?: string | null
  link_ends_with?: string | null
  link_not_ends_with?: string | null
  rank?: number | null
  rank_not?: number | null
  rank_in?: number[]
  rank_not_in?: number[]
  rank_lt?: number | null
  rank_lte?: number | null
  rank_gt?: number | null
  rank_gte?: number | null
  latest?: boolean | null
  latest_not?: boolean | null
  AND?: CandidatePositionWhereInput[]
  OR?: CandidatePositionWhereInput[]
  NOT?: CandidatePositionWhereInput[]
}
export type CandidatePositionWhereInputInputObject =
  | Extract<keyof CandidatePositionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'positionId_not', alias?: string  } 
  | { name: 'positionId_in', alias?: string  } 
  | { name: 'positionId_not_in', alias?: string  } 
  | { name: 'positionId_lt', alias?: string  } 
  | { name: 'positionId_lte', alias?: string  } 
  | { name: 'positionId_gt', alias?: string  } 
  | { name: 'positionId_gte', alias?: string  } 
  | { name: 'positionId_contains', alias?: string  } 
  | { name: 'positionId_not_contains', alias?: string  } 
  | { name: 'positionId_starts_with', alias?: string  } 
  | { name: 'positionId_not_starts_with', alias?: string  } 
  | { name: 'positionId_ends_with', alias?: string  } 
  | { name: 'positionId_not_ends_with', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'candidateId_not', alias?: string  } 
  | { name: 'candidateId_in', alias?: string  } 
  | { name: 'candidateId_not_in', alias?: string  } 
  | { name: 'candidateId_lt', alias?: string  } 
  | { name: 'candidateId_lte', alias?: string  } 
  | { name: 'candidateId_gt', alias?: string  } 
  | { name: 'candidateId_gte', alias?: string  } 
  | { name: 'candidateId_contains', alias?: string  } 
  | { name: 'candidateId_not_contains', alias?: string  } 
  | { name: 'candidateId_starts_with', alias?: string  } 
  | { name: 'candidateId_not_starts_with', alias?: string  } 
  | { name: 'candidateId_ends_with', alias?: string  } 
  | { name: 'candidateId_not_ends_with', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'time_not', alias?: string  } 
  | { name: 'time_in', alias?: string  } 
  | { name: 'time_not_in', alias?: string  } 
  | { name: 'time_lt', alias?: string  } 
  | { name: 'time_lte', alias?: string  } 
  | { name: 'time_gt', alias?: string  } 
  | { name: 'time_gte', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'link_not', alias?: string  } 
  | { name: 'link_in', alias?: string  } 
  | { name: 'link_not_in', alias?: string  } 
  | { name: 'link_lt', alias?: string  } 
  | { name: 'link_lte', alias?: string  } 
  | { name: 'link_gt', alias?: string  } 
  | { name: 'link_gte', alias?: string  } 
  | { name: 'link_contains', alias?: string  } 
  | { name: 'link_not_contains', alias?: string  } 
  | { name: 'link_starts_with', alias?: string  } 
  | { name: 'link_not_starts_with', alias?: string  } 
  | { name: 'link_ends_with', alias?: string  } 
  | { name: 'link_not_ends_with', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'rank_not', alias?: string  } 
  | { name: 'rank_in', alias?: string  } 
  | { name: 'rank_not_in', alias?: string  } 
  | { name: 'rank_lt', alias?: string  } 
  | { name: 'rank_lte', alias?: string  } 
  | { name: 'rank_gt', alias?: string  } 
  | { name: 'rank_gte', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  | { name: 'latest_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserVoteWhereUniqueInput {
  id?: string | null
}
export type UserVoteWhereUniqueInputInputObject =
  | Extract<keyof UserVoteWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserVoteWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  candidateId?: string | null
  candidateId_not?: string | null
  candidateId_in?: string[]
  candidateId_not_in?: string[]
  candidateId_lt?: string | null
  candidateId_lte?: string | null
  candidateId_gt?: string | null
  candidateId_gte?: string | null
  candidateId_contains?: string | null
  candidateId_not_contains?: string | null
  candidateId_starts_with?: string | null
  candidateId_not_starts_with?: string | null
  candidateId_ends_with?: string | null
  candidateId_not_ends_with?: string | null
  userId?: string | null
  userId_not?: string | null
  userId_in?: string[]
  userId_not_in?: string[]
  userId_lt?: string | null
  userId_lte?: string | null
  userId_gt?: string | null
  userId_gte?: string | null
  userId_contains?: string | null
  userId_not_contains?: string | null
  userId_starts_with?: string | null
  userId_not_starts_with?: string | null
  userId_ends_with?: string | null
  userId_not_ends_with?: string | null
  vote_type?: prisma.VoteType | null
  vote_type_not?: prisma.VoteType | null
  vote_type_in?: prisma.VoteType[]
  vote_type_not_in?: prisma.VoteType[]
  time?: string | null
  time_not?: string | null
  time_in?: string[]
  time_not_in?: string[]
  time_lt?: string | null
  time_lte?: string | null
  time_gt?: string | null
  time_gte?: string | null
  latest?: boolean | null
  latest_not?: boolean | null
  AND?: UserVoteWhereInput[]
  OR?: UserVoteWhereInput[]
  NOT?: UserVoteWhereInput[]
}
export type UserVoteWhereInputInputObject =
  | Extract<keyof UserVoteWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'candidateId_not', alias?: string  } 
  | { name: 'candidateId_in', alias?: string  } 
  | { name: 'candidateId_not_in', alias?: string  } 
  | { name: 'candidateId_lt', alias?: string  } 
  | { name: 'candidateId_lte', alias?: string  } 
  | { name: 'candidateId_gt', alias?: string  } 
  | { name: 'candidateId_gte', alias?: string  } 
  | { name: 'candidateId_contains', alias?: string  } 
  | { name: 'candidateId_not_contains', alias?: string  } 
  | { name: 'candidateId_starts_with', alias?: string  } 
  | { name: 'candidateId_not_starts_with', alias?: string  } 
  | { name: 'candidateId_ends_with', alias?: string  } 
  | { name: 'candidateId_not_ends_with', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'userId_not', alias?: string  } 
  | { name: 'userId_in', alias?: string  } 
  | { name: 'userId_not_in', alias?: string  } 
  | { name: 'userId_lt', alias?: string  } 
  | { name: 'userId_lte', alias?: string  } 
  | { name: 'userId_gt', alias?: string  } 
  | { name: 'userId_gte', alias?: string  } 
  | { name: 'userId_contains', alias?: string  } 
  | { name: 'userId_not_contains', alias?: string  } 
  | { name: 'userId_starts_with', alias?: string  } 
  | { name: 'userId_not_starts_with', alias?: string  } 
  | { name: 'userId_ends_with', alias?: string  } 
  | { name: 'userId_not_ends_with', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  | { name: 'vote_type_not', alias?: string  } 
  | { name: 'vote_type_in', alias?: string  } 
  | { name: 'vote_type_not_in', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'time_not', alias?: string  } 
  | { name: 'time_in', alias?: string  } 
  | { name: 'time_not_in', alias?: string  } 
  | { name: 'time_lt', alias?: string  } 
  | { name: 'time_lte', alias?: string  } 
  | { name: 'time_gt', alias?: string  } 
  | { name: 'time_gte', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  | { name: 'latest_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserQualificationLikeWhereUniqueInput {
  id?: string | null
}
export type UserQualificationLikeWhereUniqueInputInputObject =
  | Extract<keyof UserQualificationLikeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserQualificationLikeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  userId?: string | null
  userId_not?: string | null
  userId_in?: string[]
  userId_not_in?: string[]
  userId_lt?: string | null
  userId_lte?: string | null
  userId_gt?: string | null
  userId_gte?: string | null
  userId_contains?: string | null
  userId_not_contains?: string | null
  userId_starts_with?: string | null
  userId_not_starts_with?: string | null
  userId_ends_with?: string | null
  userId_not_ends_with?: string | null
  qualificationId?: string | null
  qualificationId_not?: string | null
  qualificationId_in?: string[]
  qualificationId_not_in?: string[]
  qualificationId_lt?: string | null
  qualificationId_lte?: string | null
  qualificationId_gt?: string | null
  qualificationId_gte?: string | null
  qualificationId_contains?: string | null
  qualificationId_not_contains?: string | null
  qualificationId_starts_with?: string | null
  qualificationId_not_starts_with?: string | null
  qualificationId_ends_with?: string | null
  qualificationId_not_ends_with?: string | null
  like?: prisma.LikeType | null
  like_not?: prisma.LikeType | null
  like_in?: prisma.LikeType[]
  like_not_in?: prisma.LikeType[]
  time?: string | null
  time_not?: string | null
  time_in?: string[]
  time_not_in?: string[]
  time_lt?: string | null
  time_lte?: string | null
  time_gt?: string | null
  time_gte?: string | null
  latest?: boolean | null
  latest_not?: boolean | null
  AND?: UserQualificationLikeWhereInput[]
  OR?: UserQualificationLikeWhereInput[]
  NOT?: UserQualificationLikeWhereInput[]
}
export type UserQualificationLikeWhereInputInputObject =
  | Extract<keyof UserQualificationLikeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'userId_not', alias?: string  } 
  | { name: 'userId_in', alias?: string  } 
  | { name: 'userId_not_in', alias?: string  } 
  | { name: 'userId_lt', alias?: string  } 
  | { name: 'userId_lte', alias?: string  } 
  | { name: 'userId_gt', alias?: string  } 
  | { name: 'userId_gte', alias?: string  } 
  | { name: 'userId_contains', alias?: string  } 
  | { name: 'userId_not_contains', alias?: string  } 
  | { name: 'userId_starts_with', alias?: string  } 
  | { name: 'userId_not_starts_with', alias?: string  } 
  | { name: 'userId_ends_with', alias?: string  } 
  | { name: 'userId_not_ends_with', alias?: string  } 
  | { name: 'qualificationId', alias?: string  } 
  | { name: 'qualificationId_not', alias?: string  } 
  | { name: 'qualificationId_in', alias?: string  } 
  | { name: 'qualificationId_not_in', alias?: string  } 
  | { name: 'qualificationId_lt', alias?: string  } 
  | { name: 'qualificationId_lte', alias?: string  } 
  | { name: 'qualificationId_gt', alias?: string  } 
  | { name: 'qualificationId_gte', alias?: string  } 
  | { name: 'qualificationId_contains', alias?: string  } 
  | { name: 'qualificationId_not_contains', alias?: string  } 
  | { name: 'qualificationId_starts_with', alias?: string  } 
  | { name: 'qualificationId_not_starts_with', alias?: string  } 
  | { name: 'qualificationId_ends_with', alias?: string  } 
  | { name: 'qualificationId_not_ends_with', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'like_not', alias?: string  } 
  | { name: 'like_in', alias?: string  } 
  | { name: 'like_not_in', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'time_not', alias?: string  } 
  | { name: 'time_in', alias?: string  } 
  | { name: 'time_not_in', alias?: string  } 
  | { name: 'time_lt', alias?: string  } 
  | { name: 'time_lte', alias?: string  } 
  | { name: 'time_gt', alias?: string  } 
  | { name: 'time_gte', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  | { name: 'latest_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserPositionLikeWhereUniqueInput {
  id?: string | null
}
export type UserPositionLikeWhereUniqueInputInputObject =
  | Extract<keyof UserPositionLikeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserPositionLikeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  userId?: string | null
  userId_not?: string | null
  userId_in?: string[]
  userId_not_in?: string[]
  userId_lt?: string | null
  userId_lte?: string | null
  userId_gt?: string | null
  userId_gte?: string | null
  userId_contains?: string | null
  userId_not_contains?: string | null
  userId_starts_with?: string | null
  userId_not_starts_with?: string | null
  userId_ends_with?: string | null
  userId_not_ends_with?: string | null
  candidateId?: string | null
  candidateId_not?: string | null
  candidateId_in?: string[]
  candidateId_not_in?: string[]
  candidateId_lt?: string | null
  candidateId_lte?: string | null
  candidateId_gt?: string | null
  candidateId_gte?: string | null
  candidateId_contains?: string | null
  candidateId_not_contains?: string | null
  candidateId_starts_with?: string | null
  candidateId_not_starts_with?: string | null
  candidateId_ends_with?: string | null
  candidateId_not_ends_with?: string | null
  positionId?: string | null
  positionId_not?: string | null
  positionId_in?: string[]
  positionId_not_in?: string[]
  positionId_lt?: string | null
  positionId_lte?: string | null
  positionId_gt?: string | null
  positionId_gte?: string | null
  positionId_contains?: string | null
  positionId_not_contains?: string | null
  positionId_starts_with?: string | null
  positionId_not_starts_with?: string | null
  positionId_ends_with?: string | null
  positionId_not_ends_with?: string | null
  like?: prisma.LikeType | null
  like_not?: prisma.LikeType | null
  like_in?: prisma.LikeType[]
  like_not_in?: prisma.LikeType[]
  time?: string | null
  time_not?: string | null
  time_in?: string[]
  time_not_in?: string[]
  time_lt?: string | null
  time_lte?: string | null
  time_gt?: string | null
  time_gte?: string | null
  latest?: boolean | null
  latest_not?: boolean | null
  AND?: UserPositionLikeWhereInput[]
  OR?: UserPositionLikeWhereInput[]
  NOT?: UserPositionLikeWhereInput[]
}
export type UserPositionLikeWhereInputInputObject =
  | Extract<keyof UserPositionLikeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'userId_not', alias?: string  } 
  | { name: 'userId_in', alias?: string  } 
  | { name: 'userId_not_in', alias?: string  } 
  | { name: 'userId_lt', alias?: string  } 
  | { name: 'userId_lte', alias?: string  } 
  | { name: 'userId_gt', alias?: string  } 
  | { name: 'userId_gte', alias?: string  } 
  | { name: 'userId_contains', alias?: string  } 
  | { name: 'userId_not_contains', alias?: string  } 
  | { name: 'userId_starts_with', alias?: string  } 
  | { name: 'userId_not_starts_with', alias?: string  } 
  | { name: 'userId_ends_with', alias?: string  } 
  | { name: 'userId_not_ends_with', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'candidateId_not', alias?: string  } 
  | { name: 'candidateId_in', alias?: string  } 
  | { name: 'candidateId_not_in', alias?: string  } 
  | { name: 'candidateId_lt', alias?: string  } 
  | { name: 'candidateId_lte', alias?: string  } 
  | { name: 'candidateId_gt', alias?: string  } 
  | { name: 'candidateId_gte', alias?: string  } 
  | { name: 'candidateId_contains', alias?: string  } 
  | { name: 'candidateId_not_contains', alias?: string  } 
  | { name: 'candidateId_starts_with', alias?: string  } 
  | { name: 'candidateId_not_starts_with', alias?: string  } 
  | { name: 'candidateId_ends_with', alias?: string  } 
  | { name: 'candidateId_not_ends_with', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'positionId_not', alias?: string  } 
  | { name: 'positionId_in', alias?: string  } 
  | { name: 'positionId_not_in', alias?: string  } 
  | { name: 'positionId_lt', alias?: string  } 
  | { name: 'positionId_lte', alias?: string  } 
  | { name: 'positionId_gt', alias?: string  } 
  | { name: 'positionId_gte', alias?: string  } 
  | { name: 'positionId_contains', alias?: string  } 
  | { name: 'positionId_not_contains', alias?: string  } 
  | { name: 'positionId_starts_with', alias?: string  } 
  | { name: 'positionId_not_starts_with', alias?: string  } 
  | { name: 'positionId_ends_with', alias?: string  } 
  | { name: 'positionId_not_ends_with', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'like_not', alias?: string  } 
  | { name: 'like_in', alias?: string  } 
  | { name: 'like_not_in', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'time_not', alias?: string  } 
  | { name: 'time_in', alias?: string  } 
  | { name: 'time_not_in', alias?: string  } 
  | { name: 'time_lt', alias?: string  } 
  | { name: 'time_lte', alias?: string  } 
  | { name: 'time_gt', alias?: string  } 
  | { name: 'time_gte', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  | { name: 'latest_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PollWhereUniqueInput {
  id?: string | null
}
export type PollWhereUniqueInputInputObject =
  | Extract<keyof PollWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PollWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  userId?: string | null
  userId_not?: string | null
  userId_in?: string[]
  userId_not_in?: string[]
  userId_lt?: string | null
  userId_lte?: string | null
  userId_gt?: string | null
  userId_gte?: string | null
  userId_contains?: string | null
  userId_not_contains?: string | null
  userId_starts_with?: string | null
  userId_not_starts_with?: string | null
  userId_ends_with?: string | null
  userId_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  candidateId?: string | null
  candidateId_not?: string | null
  candidateId_in?: string[]
  candidateId_not_in?: string[]
  candidateId_lt?: string | null
  candidateId_lte?: string | null
  candidateId_gt?: string | null
  candidateId_gte?: string | null
  candidateId_contains?: string | null
  candidateId_not_contains?: string | null
  candidateId_starts_with?: string | null
  candidateId_not_starts_with?: string | null
  candidateId_ends_with?: string | null
  candidateId_not_ends_with?: string | null
  poll_type?: prisma.PollType | null
  poll_type_not?: prisma.PollType | null
  poll_type_in?: prisma.PollType[]
  poll_type_not_in?: prisma.PollType[]
  error_margin?: string | null
  error_margin_not?: string | null
  error_margin_in?: string[]
  error_margin_not_in?: string[]
  error_margin_lt?: string | null
  error_margin_lte?: string | null
  error_margin_gt?: string | null
  error_margin_gte?: string | null
  error_margin_contains?: string | null
  error_margin_not_contains?: string | null
  error_margin_starts_with?: string | null
  error_margin_not_starts_with?: string | null
  error_margin_ends_with?: string | null
  error_margin_not_ends_with?: string | null
  link_to_poll?: string | null
  link_to_poll_not?: string | null
  link_to_poll_in?: string[]
  link_to_poll_not_in?: string[]
  link_to_poll_lt?: string | null
  link_to_poll_lte?: string | null
  link_to_poll_gt?: string | null
  link_to_poll_gte?: string | null
  link_to_poll_contains?: string | null
  link_to_poll_not_contains?: string | null
  link_to_poll_starts_with?: string | null
  link_to_poll_not_starts_with?: string | null
  link_to_poll_ends_with?: string | null
  link_to_poll_not_ends_with?: string | null
  AND?: PollWhereInput[]
  OR?: PollWhereInput[]
  NOT?: PollWhereInput[]
}
export type PollWhereInputInputObject =
  | Extract<keyof PollWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'userId_not', alias?: string  } 
  | { name: 'userId_in', alias?: string  } 
  | { name: 'userId_not_in', alias?: string  } 
  | { name: 'userId_lt', alias?: string  } 
  | { name: 'userId_lte', alias?: string  } 
  | { name: 'userId_gt', alias?: string  } 
  | { name: 'userId_gte', alias?: string  } 
  | { name: 'userId_contains', alias?: string  } 
  | { name: 'userId_not_contains', alias?: string  } 
  | { name: 'userId_starts_with', alias?: string  } 
  | { name: 'userId_not_starts_with', alias?: string  } 
  | { name: 'userId_ends_with', alias?: string  } 
  | { name: 'userId_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'candidateId_not', alias?: string  } 
  | { name: 'candidateId_in', alias?: string  } 
  | { name: 'candidateId_not_in', alias?: string  } 
  | { name: 'candidateId_lt', alias?: string  } 
  | { name: 'candidateId_lte', alias?: string  } 
  | { name: 'candidateId_gt', alias?: string  } 
  | { name: 'candidateId_gte', alias?: string  } 
  | { name: 'candidateId_contains', alias?: string  } 
  | { name: 'candidateId_not_contains', alias?: string  } 
  | { name: 'candidateId_starts_with', alias?: string  } 
  | { name: 'candidateId_not_starts_with', alias?: string  } 
  | { name: 'candidateId_ends_with', alias?: string  } 
  | { name: 'candidateId_not_ends_with', alias?: string  } 
  | { name: 'poll_type', alias?: string  } 
  | { name: 'poll_type_not', alias?: string  } 
  | { name: 'poll_type_in', alias?: string  } 
  | { name: 'poll_type_not_in', alias?: string  } 
  | { name: 'error_margin', alias?: string  } 
  | { name: 'error_margin_not', alias?: string  } 
  | { name: 'error_margin_in', alias?: string  } 
  | { name: 'error_margin_not_in', alias?: string  } 
  | { name: 'error_margin_lt', alias?: string  } 
  | { name: 'error_margin_lte', alias?: string  } 
  | { name: 'error_margin_gt', alias?: string  } 
  | { name: 'error_margin_gte', alias?: string  } 
  | { name: 'error_margin_contains', alias?: string  } 
  | { name: 'error_margin_not_contains', alias?: string  } 
  | { name: 'error_margin_starts_with', alias?: string  } 
  | { name: 'error_margin_not_starts_with', alias?: string  } 
  | { name: 'error_margin_ends_with', alias?: string  } 
  | { name: 'error_margin_not_ends_with', alias?: string  } 
  | { name: 'link_to_poll', alias?: string  } 
  | { name: 'link_to_poll_not', alias?: string  } 
  | { name: 'link_to_poll_in', alias?: string  } 
  | { name: 'link_to_poll_not_in', alias?: string  } 
  | { name: 'link_to_poll_lt', alias?: string  } 
  | { name: 'link_to_poll_lte', alias?: string  } 
  | { name: 'link_to_poll_gt', alias?: string  } 
  | { name: 'link_to_poll_gte', alias?: string  } 
  | { name: 'link_to_poll_contains', alias?: string  } 
  | { name: 'link_to_poll_not_contains', alias?: string  } 
  | { name: 'link_to_poll_starts_with', alias?: string  } 
  | { name: 'link_to_poll_not_starts_with', alias?: string  } 
  | { name: 'link_to_poll_ends_with', alias?: string  } 
  | { name: 'link_to_poll_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  name?: string
  password?: string | null
  gender?: prisma.Gender | null
  role?: number | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  password?: string | null
  gender?: prisma.Gender | null
  role?: number | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
  password?: string | null
  gender?: prisma.Gender | null
  role?: number | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface CandidateCreateInput {
  id?: string | null
  name?: string
  photo?: string | null
  party?: string
  state?: string
  current_office?: string
  age?: number
  gender?: prisma.Gender | null
  latest_poll?: number | null
  latest_odds?: number | null
  prevote_score?: number | null
  bio_summary?: string | null
  vote_type?: prisma.VoteType | null
}
export type CandidateCreateInputInputObject =
  | Extract<keyof CandidateCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'photo', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'current_office', alias?: string  } 
  | { name: 'age', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'latest_poll', alias?: string  } 
  | { name: 'latest_odds', alias?: string  } 
  | { name: 'prevote_score', alias?: string  } 
  | { name: 'bio_summary', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  
export interface CandidateUpdateInput {
  name?: string | null
  photo?: string | null
  party?: string | null
  state?: string | null
  current_office?: string | null
  age?: number | null
  gender?: prisma.Gender | null
  latest_poll?: number | null
  latest_odds?: number | null
  prevote_score?: number | null
  bio_summary?: string | null
  vote_type?: prisma.VoteType | null
}
export type CandidateUpdateInputInputObject =
  | Extract<keyof CandidateUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'photo', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'current_office', alias?: string  } 
  | { name: 'age', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'latest_poll', alias?: string  } 
  | { name: 'latest_odds', alias?: string  } 
  | { name: 'prevote_score', alias?: string  } 
  | { name: 'bio_summary', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  
export interface CandidateUpdateManyMutationInput {
  name?: string | null
  photo?: string | null
  party?: string | null
  state?: string | null
  current_office?: string | null
  age?: number | null
  gender?: prisma.Gender | null
  latest_poll?: number | null
  latest_odds?: number | null
  prevote_score?: number | null
  bio_summary?: string | null
  vote_type?: prisma.VoteType | null
}
export type CandidateUpdateManyMutationInputInputObject =
  | Extract<keyof CandidateUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'photo', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'current_office', alias?: string  } 
  | { name: 'age', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'latest_poll', alias?: string  } 
  | { name: 'latest_odds', alias?: string  } 
  | { name: 'prevote_score', alias?: string  } 
  | { name: 'bio_summary', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  
export interface QualificationCreateInput {
  id?: string | null
  name?: string
  summary?: string | null
  detail?: string | null
  years?: number
  rank?: number | null
  candidateId?: string | null
  like_type?: prisma.LikeType | null
}
export type QualificationCreateInputInputObject =
  | Extract<keyof QualificationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'years', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface QualificationUpdateInput {
  name?: string | null
  summary?: string | null
  detail?: string | null
  years?: number | null
  rank?: number | null
  candidateId?: string | null
  like_type?: prisma.LikeType | null
}
export type QualificationUpdateInputInputObject =
  | Extract<keyof QualificationUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'years', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface QualificationUpdateManyMutationInput {
  name?: string | null
  summary?: string | null
  detail?: string | null
  years?: number | null
  rank?: number | null
  candidateId?: string | null
  like_type?: prisma.LikeType | null
}
export type QualificationUpdateManyMutationInputInputObject =
  | Extract<keyof QualificationUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'years', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface TopicCreateInput {
  id?: string | null
  name?: string
  category?: prisma.CategoryType | null
}
export type TopicCreateInputInputObject =
  | Extract<keyof TopicCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface TopicUpdateInput {
  name?: string | null
  category?: prisma.CategoryType | null
}
export type TopicUpdateInputInputObject =
  | Extract<keyof TopicUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface TopicUpdateManyMutationInput {
  name?: string | null
  category?: prisma.CategoryType | null
}
export type TopicUpdateManyMutationInputInputObject =
  | Extract<keyof TopicUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface PositionCreateInput {
  id?: string | null
  name?: string
  summary?: string | null
  topicId?: string | null
  detail?: string | null
  like_type?: prisma.LikeType | null
}
export type PositionCreateInputInputObject =
  | Extract<keyof PositionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'topicId', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface PositionUpdateInput {
  name?: string | null
  summary?: string | null
  topicId?: string | null
  detail?: string | null
  like_type?: prisma.LikeType | null
}
export type PositionUpdateInputInputObject =
  | Extract<keyof PositionUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'topicId', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface PositionUpdateManyMutationInput {
  name?: string | null
  summary?: string | null
  topicId?: string | null
  detail?: string | null
  like_type?: prisma.LikeType | null
}
export type PositionUpdateManyMutationInputInputObject =
  | Extract<keyof PositionUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'summary', alias?: string  } 
  | { name: 'topicId', alias?: string  } 
  | { name: 'detail', alias?: string  } 
  | { name: 'like_type', alias?: string  } 
  
export interface CandidatePositionCreateInput {
  id?: string | null
  positionId?: string
  candidateId?: string
  time?: string | null
  link?: string | null
  rank?: number | null
  latest?: boolean | null
}
export type CandidatePositionCreateInputInputObject =
  | Extract<keyof CandidatePositionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface CandidatePositionUpdateInput {
  positionId?: string | null
  candidateId?: string | null
  time?: string | null
  link?: string | null
  rank?: number | null
  latest?: boolean | null
}
export type CandidatePositionUpdateInputInputObject =
  | Extract<keyof CandidatePositionUpdateInput, string>
  | { name: 'positionId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface CandidatePositionUpdateManyMutationInput {
  positionId?: string | null
  candidateId?: string | null
  time?: string | null
  link?: string | null
  rank?: number | null
  latest?: boolean | null
}
export type CandidatePositionUpdateManyMutationInputInputObject =
  | Extract<keyof CandidatePositionUpdateManyMutationInput, string>
  | { name: 'positionId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'rank', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserVoteCreateInput {
  id?: string | null
  candidateId?: string
  userId?: string
  vote_type?: prisma.VoteType | null
  time?: string | null
  latest?: boolean | null
}
export type UserVoteCreateInputInputObject =
  | Extract<keyof UserVoteCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserVoteUpdateInput {
  candidateId?: string | null
  userId?: string | null
  vote_type?: prisma.VoteType | null
  time?: string | null
  latest?: boolean | null
}
export type UserVoteUpdateInputInputObject =
  | Extract<keyof UserVoteUpdateInput, string>
  | { name: 'candidateId', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserVoteUpdateManyMutationInput {
  candidateId?: string | null
  userId?: string | null
  vote_type?: prisma.VoteType | null
  time?: string | null
  latest?: boolean | null
}
export type UserVoteUpdateManyMutationInputInputObject =
  | Extract<keyof UserVoteUpdateManyMutationInput, string>
  | { name: 'candidateId', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'vote_type', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserQualificationLikeCreateInput {
  id?: string | null
  userId?: string
  qualificationId?: string
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserQualificationLikeCreateInputInputObject =
  | Extract<keyof UserQualificationLikeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'qualificationId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserQualificationLikeUpdateInput {
  userId?: string | null
  qualificationId?: string | null
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserQualificationLikeUpdateInputInputObject =
  | Extract<keyof UserQualificationLikeUpdateInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'qualificationId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserQualificationLikeUpdateManyMutationInput {
  userId?: string | null
  qualificationId?: string | null
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserQualificationLikeUpdateManyMutationInputInputObject =
  | Extract<keyof UserQualificationLikeUpdateManyMutationInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'qualificationId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserPositionLikeCreateInput {
  id?: string | null
  userId?: string
  candidateId?: string
  positionId?: string
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserPositionLikeCreateInputInputObject =
  | Extract<keyof UserPositionLikeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserPositionLikeUpdateInput {
  userId?: string | null
  candidateId?: string | null
  positionId?: string | null
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserPositionLikeUpdateInputInputObject =
  | Extract<keyof UserPositionLikeUpdateInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface UserPositionLikeUpdateManyMutationInput {
  userId?: string | null
  candidateId?: string | null
  positionId?: string | null
  like?: prisma.LikeType | null
  time?: string | null
  latest?: boolean | null
}
export type UserPositionLikeUpdateManyMutationInputInputObject =
  | Extract<keyof UserPositionLikeUpdateManyMutationInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'positionId', alias?: string  } 
  | { name: 'like', alias?: string  } 
  | { name: 'time', alias?: string  } 
  | { name: 'latest', alias?: string  } 
  
export interface PollCreateInput {
  id?: string | null
  userId?: string
  date?: string | null
  candidateId?: string
  poll_type?: prisma.PollType | null
  error_margin?: string | null
  link_to_poll?: string | null
}
export type PollCreateInputInputObject =
  | Extract<keyof PollCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userId', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'poll_type', alias?: string  } 
  | { name: 'error_margin', alias?: string  } 
  | { name: 'link_to_poll', alias?: string  } 
  
export interface PollUpdateInput {
  userId?: string | null
  date?: string | null
  candidateId?: string | null
  poll_type?: prisma.PollType | null
  error_margin?: string | null
  link_to_poll?: string | null
}
export type PollUpdateInputInputObject =
  | Extract<keyof PollUpdateInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'poll_type', alias?: string  } 
  | { name: 'error_margin', alias?: string  } 
  | { name: 'link_to_poll', alias?: string  } 
  
export interface PollUpdateManyMutationInput {
  userId?: string | null
  date?: string | null
  candidateId?: string | null
  poll_type?: prisma.PollType | null
  error_margin?: string | null
  link_to_poll?: string | null
}
export type PollUpdateManyMutationInputInputObject =
  | Extract<keyof PollUpdateManyMutationInput, string>
  | { name: 'userId', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'candidateId', alias?: string  } 
  | { name: 'poll_type', alias?: string  } 
  | { name: 'error_margin', alias?: string  } 
  | { name: 'link_to_poll', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CandidateSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CandidateWhereInput | null
  AND?: CandidateSubscriptionWhereInput[]
  OR?: CandidateSubscriptionWhereInput[]
  NOT?: CandidateSubscriptionWhereInput[]
}
export type CandidateSubscriptionWhereInputInputObject =
  | Extract<keyof CandidateSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface QualificationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: QualificationWhereInput | null
  AND?: QualificationSubscriptionWhereInput[]
  OR?: QualificationSubscriptionWhereInput[]
  NOT?: QualificationSubscriptionWhereInput[]
}
export type QualificationSubscriptionWhereInputInputObject =
  | Extract<keyof QualificationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TopicSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TopicWhereInput | null
  AND?: TopicSubscriptionWhereInput[]
  OR?: TopicSubscriptionWhereInput[]
  NOT?: TopicSubscriptionWhereInput[]
}
export type TopicSubscriptionWhereInputInputObject =
  | Extract<keyof TopicSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PositionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PositionWhereInput | null
  AND?: PositionSubscriptionWhereInput[]
  OR?: PositionSubscriptionWhereInput[]
  NOT?: PositionSubscriptionWhereInput[]
}
export type PositionSubscriptionWhereInputInputObject =
  | Extract<keyof PositionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CandidatePositionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CandidatePositionWhereInput | null
  AND?: CandidatePositionSubscriptionWhereInput[]
  OR?: CandidatePositionSubscriptionWhereInput[]
  NOT?: CandidatePositionSubscriptionWhereInput[]
}
export type CandidatePositionSubscriptionWhereInputInputObject =
  | Extract<keyof CandidatePositionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserVoteSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserVoteWhereInput | null
  AND?: UserVoteSubscriptionWhereInput[]
  OR?: UserVoteSubscriptionWhereInput[]
  NOT?: UserVoteSubscriptionWhereInput[]
}
export type UserVoteSubscriptionWhereInputInputObject =
  | Extract<keyof UserVoteSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserQualificationLikeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserQualificationLikeWhereInput | null
  AND?: UserQualificationLikeSubscriptionWhereInput[]
  OR?: UserQualificationLikeSubscriptionWhereInput[]
  NOT?: UserQualificationLikeSubscriptionWhereInput[]
}
export type UserQualificationLikeSubscriptionWhereInputInputObject =
  | Extract<keyof UserQualificationLikeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserPositionLikeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserPositionLikeWhereInput | null
  AND?: UserPositionLikeSubscriptionWhereInput[]
  OR?: UserPositionLikeSubscriptionWhereInput[]
  NOT?: UserPositionLikeSubscriptionWhereInput[]
}
export type UserPositionLikeSubscriptionWhereInputInputObject =
  | Extract<keyof UserPositionLikeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PollSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PollWhereInput | null
  AND?: PollSubscriptionWhereInput[]
  OR?: PollSubscriptionWhereInput[]
  NOT?: PollSubscriptionWhereInput[]
}
export type PollSubscriptionWhereInputInputObject =
  | Extract<keyof PollSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type GenderValues =
  | 'MALE'
  | 'FEMALE'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'gender_ASC'
  | 'gender_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VoteTypeValues =
  | 'TOP'
  | 'FAVORITE'
  | 'COMPROMISE'
  | 'VETO'
  | 'UNKNOWNS'
  
export type CandidateOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'photo_ASC'
  | 'photo_DESC'
  | 'party_ASC'
  | 'party_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'current_office_ASC'
  | 'current_office_DESC'
  | 'age_ASC'
  | 'age_DESC'
  | 'gender_ASC'
  | 'gender_DESC'
  | 'latest_poll_ASC'
  | 'latest_poll_DESC'
  | 'latest_odds_ASC'
  | 'latest_odds_DESC'
  | 'prevote_score_ASC'
  | 'prevote_score_DESC'
  | 'bio_summary_ASC'
  | 'bio_summary_DESC'
  | 'vote_type_ASC'
  | 'vote_type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type LikeTypeValues =
  | 'LIKE'
  | 'DISLIKE'
  | 'UNSPECIFIED'
  
export type QualificationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'summary_ASC'
  | 'summary_DESC'
  | 'detail_ASC'
  | 'detail_DESC'
  | 'years_ASC'
  | 'years_DESC'
  | 'rank_ASC'
  | 'rank_DESC'
  | 'candidateId_ASC'
  | 'candidateId_DESC'
  | 'like_type_ASC'
  | 'like_type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CategoryTypeValues =
  | 'ABORTION'
  | 'ACTIVISM'
  | 'AWARDS'
  | 'AWARDS_FOR_MILITARY_SERVICE'
  | 'BANKING'
  | 'BIOGRAPHICAL'
  | 'BIPARTISAMSHIP'
  | 'BUDGET'
  | 'CAMPAIGN'
  | 'CIVIL_RIGHTS'
  | 'CONSTITUENT_SERVICES'
  | 'CRIME'
  | 'DEFENSE'
  | 'DRUG_POLICY'
  | 'ECONOMIC_INEQUALITY'
  | 'ECONOMY'
  | 'EDUCATION'
  | 'ENVIRONMENT'
  | 'EXECUTIVE_LEADERSHIP'
  | 'FOREIGN_POLICY'
  | 'GAFFES'
  | 'GENDER'
  | 'GUN_RIGHTS_CONTROL'
  | 'HEALTH_CARE'
  | 'IMMIGRATION'
  | 'INFRASTRUCTURE'
  | 'INTELLECTUAL_ABILITY'
  | 'LEGISLATIVE'
  | 'MILITARY_SERVICE'
  | 'POLICING'
  | 'POLITICAL_STRATEGY'
  | 'SCANDAL'
  | 'TBD'
  | 'URBAN_DEVELOPMENT'
  
export type TopicOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PositionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'summary_ASC'
  | 'summary_DESC'
  | 'topicId_ASC'
  | 'topicId_DESC'
  | 'detail_ASC'
  | 'detail_DESC'
  | 'like_type_ASC'
  | 'like_type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CandidatePositionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'positionId_ASC'
  | 'positionId_DESC'
  | 'candidateId_ASC'
  | 'candidateId_DESC'
  | 'time_ASC'
  | 'time_DESC'
  | 'link_ASC'
  | 'link_DESC'
  | 'rank_ASC'
  | 'rank_DESC'
  | 'latest_ASC'
  | 'latest_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserVoteOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'candidateId_ASC'
  | 'candidateId_DESC'
  | 'userId_ASC'
  | 'userId_DESC'
  | 'vote_type_ASC'
  | 'vote_type_DESC'
  | 'time_ASC'
  | 'time_DESC'
  | 'latest_ASC'
  | 'latest_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserQualificationLikeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'userId_ASC'
  | 'userId_DESC'
  | 'qualificationId_ASC'
  | 'qualificationId_DESC'
  | 'like_ASC'
  | 'like_DESC'
  | 'time_ASC'
  | 'time_DESC'
  | 'latest_ASC'
  | 'latest_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserPositionLikeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'userId_ASC'
  | 'userId_DESC'
  | 'candidateId_ASC'
  | 'candidateId_DESC'
  | 'positionId_ASC'
  | 'positionId_DESC'
  | 'like_ASC'
  | 'like_DESC'
  | 'time_ASC'
  | 'time_DESC'
  | 'latest_ASC'
  | 'latest_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PollTypeValues =
  | 'PRIMARY'
  | 'HEADTOHEAD'
  
export type PollOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'userId_ASC'
  | 'userId_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'candidateId_ASC'
  | 'candidateId_DESC'
  | 'poll_type_ASC'
  | 'poll_type_DESC'
  | 'error_margin_ASC'
  | 'error_margin_DESC'
  | 'link_to_poll_ASC'
  | 'link_to_poll_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  